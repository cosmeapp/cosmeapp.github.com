<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>美妆心得技术博客</title>
    <link>https://cosmeapp.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Fri, 06 Apr 2018 03:56:29 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>移动端弹框</title>
      <link>https://cosmeapp.github.io/2017/10/29/mobile-dialog/</link>
      <guid>https://cosmeapp.github.io/2017/10/29/mobile-dialog/</guid>
      <pubDate>Sun, 29 Oct 2017 14:30:17 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;p&gt;最近看了一篇文章，是关于移动端弹框的讲解，从中对弹框的定义有了更清楚的了解，以便于结合弹框本身的特点去使用，做出更好的产品。&lt;/p&gt;&lt;h2 id=&quot;移动端弹框的分类&quot;&gt;&lt;a href=&quot;#移动端弹框的分类&quot; class=&quot;headerlink&quot;
          
        
      
      </description>
      
      <content:encoded><![CDATA[<p>最近看了一篇文章，是关于移动端弹框的讲解，从中对弹框的定义有了更清楚的了解，以便于结合弹框本身的特点去使用，做出更好的产品。</p><h2 id="移动端弹框的分类"><a href="#移动端弹框的分类" class="headerlink" title="移动端弹框的分类"></a>移动端弹框的分类</h2><p>依据交互成本可分为模态弹框和非模态弹框。</p><h2 id="什么是模态弹框？"><a href="#什么是模态弹框？" class="headerlink" title="什么是模态弹框？"></a>什么是模态弹框？</h2><ol><li>移动端的模态弹框一般是指对话框，IOS是指警示框。当模态弹窗出现时，需要解决弹框中的任务，才能去做其他事情。</li><li>MaterialDesign中对Dialogs的定义是：用于提示用户作一些决定，或者是完成某个任务时需要的一些其它额外的信息。Dialog可用于告知用户问题的具体信息以便他们做出重要的决定，或者是用于解释接下来的动作的重要性及后果 。</li><li>模态对话框内部的构成一般包括了：标题、内容、一个或多个选项，内容有时可以省略。<img src="/images/mobile-dialog/1.png" alt="image"></li></ol><h2 id="什么是非模态弹框？"><a href="#什么是非模态弹框？" class="headerlink" title="什么是非模态弹框？"></a>什么是非模态弹框？</h2><p>定义：非模态弹窗在弹出时不会中断当前页面的其它功能。</p><ol><li>Snackbar：针对操作的轻量级反馈机制，出现在手机屏幕下方，在屏幕所有层的最上方，只能以文本的形式存在。可以在屏幕上滑动关闭，允许承载一个行为。（可交互）<img src="/images/mobile-dialog/2.png" alt="image"></li><li>Toast：主要用于提示系统消息的胶囊状的提示框，只能以文本形式存在。开发者可以自定义的 Toast 和它在屏幕上的位置。并不包含操作也不能从屏幕上滑动关闭。（不可交互 ）<img src="/images/mobile-dialog/3.png" alt="image"></li><li>HUD：iOS中的透明指示层，英文全称head up display，用于提供轻量的反馈，在页面居中位置，可以使用图标，有可变动信息，如iOS音量加减。（不可交互） <img src="/images/mobile-dialog/4.png" alt="image"></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>模态弹框更聚焦，非模态弹框更轻巧，要结合使用情景和意图去使用弹框，给用户更好的体验。</p>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/10/29/mobile-dialog/#disqus_thread</comments>
    </item>
    
    <item>
      <title>iOS开发-利用AVFoundation开发仿微信的拍摄功能</title>
      <link>https://cosmeapp.github.io/2017/10/29/iOS-AVFoundation/</link>
      <guid>https://cosmeapp.github.io/2017/10/29/iOS-AVFoundation/</guid>
      <pubDate>Sun, 29 Oct 2017 14:27:39 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h2 id=&quot;iOS开发-利用AVFoundation开发仿微信的拍摄功能&quot;&gt;&lt;a href=&quot;#iOS开发-利用AVFoundation开发仿微信的拍摄功能&quot; class=&quot;headerlink&quot;
          
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="iOS开发-利用AVFoundation开发仿微信的拍摄功能"><a href="#iOS开发-利用AVFoundation开发仿微信的拍摄功能" class="headerlink" title="iOS开发-利用AVFoundation开发仿微信的拍摄功能"></a>iOS开发-利用AVFoundation开发仿微信的拍摄功能</h2><h3 id="AVFoundation概述"><a href="#AVFoundation概述" class="headerlink" title="AVFoundation概述"></a>AVFoundation概述</h3><p>AVFoundation是一个可以用来使用和创建基于时间的视听媒体的框架，它提供了一个能使用基于时间的视听数据的详细级别的Objective-C接口。</p><p>你可以用它来：</p><ul><li>检查，创建，编辑或是重新编码媒体文件</li><li>从设备中获取输入流</li><li>在视频实时播放时操作和回放</li></ul><p>AVFoundation框架包含视频相关的APIs和音频相关的API。</p><h3 id="开发中要使用的相关的类"><a href="#开发中要使用的相关的类" class="headerlink" title="开发中要使用的相关的类"></a>开发中要使用的相关的类</h3><ul><li>AVCaptureSession ：是AVFoundation的核心类,用于捕捉视频和音频,协调视频和音频的输入和输出流。</li><li>AVCaptureVideoPreviewLayer：一个核心动画层，当有视频被捕获时，就可以在这上面显示。他是CALayer的子类。</li><li>AVCaptureDevice：可以初始化一个设备，这个设备可以是视频或者音频。你可以使用这个设备配置一些硬件属性。它同时向AVCaptureSession提供输入数据</li><li>AVCaptureDeviceInput：设备输入</li><li>AVCaptureVideoDataOutput: 视频输出</li><li>AVCaptureAudioDataOutput：音频输出</li><li>AVCaptureStillImageOutput：图像输出</li></ul><h3 id="项目相关需求"><a href="#项目相关需求" class="headerlink" title="项目相关需求"></a>项目相关需求</h3><p>​ 同时提供拍照和录制视频功能。单击拍摄按钮为拍照功能，长按则直接录制视频。</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p>​ 在vc(ViewController，一下ViewController均简称vc)中定义如下与AVFoundation相关的属性:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会话</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> session : <span class="type">AVCaptureSession</span>?</span><br><span class="line"></span><br><span class="line"><span class="comment">//视频音频设备</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> videoCaptureDevice : <span class="type">AVCaptureDevice</span>?</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> audioCaptureDevice : <span class="type">AVCaptureDevice</span>?</span><br><span class="line"></span><br><span class="line"><span class="comment">//视频音频输入</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> videoDeviceInput : <span class="type">AVCaptureDeviceInput</span>?</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> audioDeviceInput : <span class="type">AVCaptureDeviceInput</span>?</span><br><span class="line"></span><br><span class="line"><span class="comment">//视频音频照片输出</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> videoOutput : <span class="type">AVCaptureVideoDataOutput</span>?</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> audioOutput : <span class="type">AVCaptureAudioDataOutput</span>?</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> imageOutput : <span class="type">AVCaptureStillImageOutput</span>?</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于视频缓存</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> mediaWriter : <span class="type">PBJMediaWriter</span>?</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> videoPreviewLayer : <span class="type">AVCaptureVideoPreviewLayer</span>?</span><br></pre></td></tr></table></figure><p>并在代码中初始化</p><p>初始化session:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session = <span class="type">AVCaptureSession</span>()</span><br><span class="line">session?.sessionPreset = <span class="type">AVCaptureSessionPreset1280x720</span></span><br></pre></td></tr></table></figure><p>初始化video相关设备，并与session绑定：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//video</span></span><br><span class="line">videoCaptureDevice = <span class="type">AVCaptureDevice</span>.defaultDevice(withMediaType: <span class="type">AVMediaTypeVideo</span>)</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">        videoDeviceInput = <span class="keyword">try</span> <span class="type">AVCaptureDeviceInput</span>.<span class="keyword">init</span>(device: videoCaptureDevice!)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"initial videoDeviceInput error"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//video input</span></span><br><span class="line"><span class="keyword">if</span> session!.canAddInput(videoDeviceInput!) &#123;</span><br><span class="line">  <span class="comment">//如果session支持该inputDevice，则添加到session中</span></span><br><span class="line">    session!.addInput(videoDeviceInput!)</span><br><span class="line">    videoPreviewLayer?.connection.videoOrientation = .portrait</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以相同的逻辑初始化audio:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//audio</span></span><br><span class="line">audioCaptureDevice = <span class="type">AVCaptureDevice</span>.defaultDevice(withMediaType: <span class="type">AVMediaTypeAudio</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    audioDeviceInput = <span class="keyword">try</span> <span class="type">AVCaptureDeviceInput</span>.<span class="keyword">init</span>(device: audioCaptureDevice)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"initial videoDeviceInput error"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//audio input</span></span><br><span class="line"><span class="keyword">if</span> session!.canAddInput(audioDeviceInput!) &#123;</span><br><span class="line">    session!.addInput(audioDeviceInput!)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该项目中同时又三个输出，即视频，音频和图片：其初始化方法如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//video output</span></span><br><span class="line">videoOutput = <span class="type">AVCaptureVideoDataOutput</span>()</span><br><span class="line">videoOutput!.videoSettings = [kCVPixelBufferPixelFormatTypeKey <span class="keyword">as</span> <span class="type">String</span> : kCVPixelFormatType_420YpCbCr8BiPlanarFullRange]</span><br><span class="line">videoOutput!.setSampleBufferDelegate(<span class="keyword">self</span>, queue: queue)</span><br><span class="line">session!.addOutput(videoOutput)</span><br><span class="line"></span><br><span class="line"><span class="comment">//audio output</span></span><br><span class="line">audioOutput = <span class="type">AVCaptureAudioDataOutput</span>()</span><br><span class="line">audioOutput!.setSampleBufferDelegate(<span class="keyword">self</span>, queue: queue)</span><br><span class="line">session!.addOutput(audioOutput)</span><br><span class="line"></span><br><span class="line"><span class="comment">//photo output</span></span><br><span class="line">imageOutput = <span class="type">AVCaptureStillImageOutput</span>()</span><br><span class="line">imageOutput!.outputSettings = [<span class="type">AVVideoCodecKey</span> : <span class="type">AVVideoCodecJPEG</span>]</span><br><span class="line">session!.addOutput(imageOutput)</span><br></pre></td></tr></table></figure><p>以上代码中，在设置setSampleBufferDelegate，加入了一个queue队列，这是一个串行队列，在vc中初始化如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//音频视频输出的串行队列</span></span><br><span class="line"><span class="built_in">lazy</span> <span class="keyword">private</span> <span class="keyword">var</span> queue : <span class="type">DispatchQueue</span> = &#123;</span><br><span class="line">    <span class="keyword">let</span> queue = <span class="type">DispatchQueue</span>(label: <span class="string">"ouputQueue"</span>)</span><br><span class="line">    <span class="keyword">return</span> queue</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>同时，这里使用了一个第三方库用于将拍照或者录制的数据写入硬盘中：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//视频缓存路径</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> path : <span class="type">URL</span> = &#123;</span><br><span class="line"><span class="keyword">let</span> doc = <span class="type">FileManager</span>.<span class="keyword">default</span>.urls(<span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>:.userDomainMask).last</span><br><span class="line"><span class="keyword">let</span> path = doc?.appendingPathComponent(<span class="string">"recordVideo"</span>).appendingPathExtension(<span class="string">"mp4"</span>)</span><br><span class="line"><span class="keyword">return</span> path!</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于视频缓存</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> mediaWriter : <span class="type">PBJMediaWriter</span>?</span><br></pre></td></tr></table></figure><p>在代码中设置若干标志位用于记录当前的拍摄状态，并记录录制时间：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> isRecording : <span class="type">Bool</span> = <span class="literal">false</span> <span class="comment">//录制状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> isTakePhoto : <span class="type">Bool</span> = <span class="literal">false</span> <span class="comment">//拍照状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> beginTime : <span class="type">TimeInterval</span>? = <span class="literal">nil</span> <span class="comment">//开始录制时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> videoWritten : <span class="type">Bool</span> = <span class="literal">false</span> <span class="comment">//记录buffer是否是视</span></span><br></pre></td></tr></table></figure><p>监听手势，当长按手势大于指定时间时，则判定为录制视频，否则，则是拍照：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MARK: 手势响应</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleLongPress</span><span class="params">(<span class="number">_</span> gesture : UILongPressGestureRecognizer)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> gesture.state == .began &#123;</span><br><span class="line">        beginTime = <span class="type">Date</span>().timeIntervalSince1970</span><br><span class="line">        _startVideo()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> gesture.state == .cancelled || gesture.state == .ended &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="type">Date</span>().timeIntervalSince1970 - beginTime! &lt; minRecordDuration &#123;</span><br><span class="line">            _takePhoto()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _endVideo()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最核心的就是监听AVCaptureVideoDataOutputSampleBufferDelegate和AVCaptureAudioDataOutputSampleBufferDelegate的回调方法，将数据存入指定的路径中：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MARK: AVCaptureVideoDataOutputSampleBufferDelegate &amp;&amp; AVCaptureAudioDataOutputSampleBufferDelegate</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">captureOutput</span><span class="params">(<span class="number">_</span> captureOutput: AVCaptureOutput!, didOutputSampleBuffer sampleBuffer: CMSampleBuffer!, from connection: AVCaptureConnection!)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> !<span class="type">CMSampleBufferDataIsReady</span>(sampleBuffer) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// check</span></span><br><span class="line">        <span class="keyword">if</span> !isRecording ||  mediaWriter == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> isVideo = captureOutput == videoOutput</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> !isVideo &amp;&amp; !(mediaWriter!.isAudioReady)  &#123;</span><br><span class="line">            <span class="comment">//audio settings</span></span><br><span class="line">            <span class="number">_</span> = _setupAudioWithSampleBuffer(sampleBuffer: sampleBuffer)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isVideo &amp;&amp; !(mediaWriter!.isVideoReady) &#123;</span><br><span class="line">            <span class="comment">//video settings</span></span><br><span class="line">            <span class="number">_</span> = _setupVideoWithSampleBuffer(sampleBuffer: sampleBuffer)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> isReadyToRecord : <span class="type">Bool</span> = mediaWriter!.isAudioReady &amp;&amp; mediaWriter!.isVideoReady</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isReadyToRecord) &#123;</span><br><span class="line">            <span class="comment">//需要音频和视频同时准备好</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isVideo &#123;</span><br><span class="line">            mediaWriter?.write(sampleBuffer, withMediaTypeVideo: isVideo)</span><br><span class="line">            videoWritten = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> !isVideo &amp;&amp; videoWritten  &#123;</span><br><span class="line">            mediaWriter?.write(sampleBuffer, withMediaTypeVideo: isVideo)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在开启系统设备后，videoOutput和audioOutput都会将数据出入该回调方法，即sampleBuffer。在音频和视频buffer同时准备好了之后，则将该buffer写入指定路径。拍照则使用另外一套逻辑。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">_takePhoto</span><span class="params">()</span></span> &#123;</span><br><span class="line">        isTakePhoto = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> videoConnection = imageOutput?.connection(withMediaType: <span class="type">AVMediaTypeVideo</span>);</span><br><span class="line">        videoConnection?.videoOrientation = .portrait</span><br><span class="line"></span><br><span class="line">        imageOutput?.captureStillImageAsynchronously(from: videoConnection!, completionHandler: &#123; (buffer, error) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> error == <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> imageData = <span class="type">AVCaptureStillImageOutput</span>.jpegStillImageNSDataRepresentation(buffer)</span><br><span class="line">                <span class="keyword">var</span> image = <span class="type">UIImage</span>(data: imageData!)</span><br><span class="line">                image = image!.fixOrientation()</span><br><span class="line">                <span class="keyword">let</span> vc = <span class="type">VisionPreviewViewController</span>()</span><br><span class="line">                vc.photo = image</span><br><span class="line">                vc.delegate = <span class="keyword">self</span></span><br><span class="line">                <span class="keyword">self</span>.navigationController?.pushViewController(vc, animated: <span class="literal">false</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>利用imageOutput异步获取imageData并转为image格式。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>利用AVFoundation开发拍摄功能的核心代码已经介绍大致如上，其中还是许多相关细节并没与在文中意义赘述，代码请参考：<a href="https://github.com/leoIsAllRight/SwiftDemo/tree/master/SwiftDemo的vision中的相关类。" target="_blank" rel="noopener">https://github.com/leoIsAllRight/SwiftDemo/tree/master/SwiftDemo的vision中的相关类。</a></p>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/10/29/iOS-AVFoundation/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android线程知识整理</title>
      <link>https://cosmeapp.github.io/2017/10/29/android-multi-thread/</link>
      <guid>https://cosmeapp.github.io/2017/10/29/android-multi-thread/</guid>
      <pubDate>Sun, 29 Oct 2017 14:26:16 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h2 id=&quot;Android线程知识整理&quot;&gt;&lt;a href=&quot;#Android线程知识整理&quot; class=&quot;headerlink&quot;
          
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Android线程知识整理"><a href="#Android线程知识整理" class="headerlink" title="Android线程知识整理"></a>Android线程知识整理</h2><ul><li>Handler</li></ul><p>每个线程都和一个Handler类实例绑定，而且可以和别的线程一起运行，相互通信。<br>AsyncTask内部也是使用Handler进行处理的，只是不是运行在UI线程而已，它会提供一个channel来和UI线程通信，使用postExecute方法即可实现。</p><ul><li>AsyncTask</li></ul><p>使用AsyncTask是在Android上操作线程最简单的方式，也是最容易出错的方式。</p><ul><li>IntentService</li></ul><p>这种方式需要写更多的代码，但是这是把耗时任务移动到后台的很好的方式，也是我最喜欢的方式。配上使用一个EventBus机制的框架如Otto，这样的话实现IntentService就非常简单了。</p><ul><li>Loader</li></ul><p>关于处理异步任务，还有很多事情需要做，比如从数据库或者内容提供者那里处理一些数据。</p><ul><li>Service</li></ul><p>如果你曾经使用过Service的话，你应该知道这里会有一点误区，其中一个常见的误解就是服务是运行在后台线程的。其实不是！看似运行在后台是因为它们不与UI组件关联，但是它们（默认）是运行在UI线程上的……所以默认运行在UI线程上，甚至在上面没有UI部件。</p><h3 id="Android进程"><a href="#Android进程" class="headerlink" title="Android进程"></a>Android进程</h3><p>Android会根据进程中运行的组件类别以及组件的状态来判断该进程的重要性，Android会首先停止那些不重要的进程。按照重要性从高到低一共有五个级别：</p><p><strong>前台进程 &gt; 可见进程 &gt; 服务进程 &gt; 后台进程 &gt; 空进程</strong></p><p>空进程：未运行任何程序组件。运行这些进程的唯一原因是作为一个缓存，缩短下次程序需要重新使用的启动时间。系统经常中止这些进程，这样可以调节程序缓存和系统缓存的平衡。</p><p>Android 对进程的重要性评级的时候，选取它最高的级别。另外，当被另外的一个进程依赖的时候，某个进程的级别可能会增高。一个为其他进程服务的进程永远不会比被服务的进程重要级低。因为服务进程比后台activity进程重要级高，因此一个要进行耗时工作的activity最好启动一个service来做这个工作，而不是开启一个子进程――特别是这个操作需要的时间比activity存在的时间还要长的时候。例如，在后台播放音乐，向网上上传摄像头拍到的图片，使用service可以使进程最少获取到“服务进程”级别的重要级，而不用考虑activity目前是什么状态。broadcast receivers做费时的工作的时候，也应该启用一个服务而不是开一个线程。</p><h4 id="Android的单线程模型"><a href="#Android的单线程模型" class="headerlink" title="Android的单线程模型"></a>Android的单线程模型</h4><p>Android UI操作并不是线程安全的并且这些操作必须在UI线程中执行。</p><hr><h3 id="Message-Queue"><a href="#Message-Queue" class="headerlink" title="Message Queue"></a>Message Queue</h3><p><strong>Message Queue是一个消息队列，用来存放通过Handler发布的消息。</strong> 消息队列通常附属于某一个创建它的线程，可以通过Looper.myQueue()得到当前线程的消息队列。Android在第一次启动程序时会为UI thread创建一个关联的消息队列，用来管理程序的一些上层组件，activities，broadcase receivers等等。你可以在自己的子线程中创建Handler与UI thread通讯。</p><p>注：产生一个Message对象，可以new，也可以使用<code>Message.obtain()</code>方法；两者都可以，但是更建议使用obtain方法，因为Message内部维护了一个Message池用于Message的复用，避免使用new 重新分配内存。</p><p><code>Message.obtain()</code>源码：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a new Message instance from the global pool. Allows us to</span></span><br><span class="line"><span class="comment"> * avoid allocating new objects in many cases.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (sPoolSync) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sPool != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Message m = sPool;</span><br><span class="line">            sPool = m.next;</span><br><span class="line">            m.next = <span class="keyword">null</span>;</span><br><span class="line">            m.flags = <span class="number">0</span>; <span class="comment">// clear in-use flag</span></span><br><span class="line">            sPoolSize--;</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Message();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="Hanlder"><a href="#Hanlder" class="headerlink" title="Hanlder"></a>Hanlder</h3><p>Handler处理者，是Message的主要处理者，负责Message的发送，Message内容的执行处理。后台线程就是通过传进来的Handler对象引用来<code>sendMessage(Message)</code>。而使用Handler，需要implement 该类的<code>handleMessage(Message)</code>方法，它是处理这些Message的操作内容，例如Update UI。通常需要子类化Handler来实现handleMessage方法。</p><p><strong>Handler实例化时，会首先得到当前线程中保存的Looper实例，进而与Looper实例中的MessageQueue想关联。也就是与当前线程绑定。</strong></p><p>主要的方法有：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span></span><br></pre></td></tr></table></figure><p></p><p>把消息放入该Handler所 关联的消息队列，放置在所有当前时间前未被处理的消息后。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span></span><br></pre></td></tr></table></figure><p>关联该消息队列的线 程将通过调用Handler的handleMessage方 法来接收和处理消息，通常需要子类化Handler来 实现handleMessage。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// all standard stuff</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// all standard stuff</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// we're creating a new handler here</span></span><br><span class="line">        <span class="comment">// and we're in the UI Thread (default)</span></span><br><span class="line">        <span class="comment">// so this Handler is associated with the UI thread</span></span><br><span class="line">        Handler mHandler = <span class="keyword">new</span> Handler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// I want to start doing something really long</span></span><br><span class="line">        <span class="comment">// which means I should run the fella in another thread.</span></span><br><span class="line">        <span class="comment">// I do that by sending a message - in the form of another runnable object</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// But first, I'm going to create a Runnable object or a message for this</span></span><br><span class="line">        Runnable mRunnableOnSeparateThread = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// do some long operation</span></span><br><span class="line">                longOperation();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// After mRunnableOnSeparateThread is done with it's job,</span></span><br><span class="line">                <span class="comment">// I need to tell the user that i'm done</span></span><br><span class="line">                <span class="comment">// which means I need to send a message back to the UI thread</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// who do we know that's associated with the UI thread?</span></span><br><span class="line">                mHandler.post(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                        <span class="comment">// do some UI related thing</span></span><br><span class="line">                        <span class="comment">// like update a progress bar or TextView</span></span><br><span class="line">                        <span class="comment">// ....</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Cool but I've not executed the mRunnableOnSeparateThread yet</span></span><br><span class="line">        <span class="comment">// I've only defined the message to be sent</span></span><br><span class="line">        <span class="comment">// When I execute it though, I want it to be in a different thread</span></span><br><span class="line">        <span class="comment">// that was the whole point.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(mRunnableOnSeparateThread).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h3><p>Looper是每条线程里的Message Queue的管家。Android没有Global的Message Queue，而Android会自动替主线程(UI线程)建立Message Queue，但在子线程里并没有建立Message Queue。所以调用<code>Looper.getMainLooper()</code>得到的主线程的Looper不为NULL，但调用<code>Looper.myLooper()</code>得到当前线程的Looper就有可能为NULL。</p><p>1) 可以通过Looper类的静态方法<code>Looper.myLooper</code>得到当前线程的Looper实例，如果当前线程未关联一个Looper实例，该方法将返回空。</p><p>2) 可以通过静态方法<code>Looper.getMainLooper()</code>方法得到主线程的Looper实例</p><ul><li>首先<code>Looper.prepare()</code>在本线程中保存一个Looper实例，然后该实例中保存一个MessageQueue对象；因为Looper.prepare()在一个线程中只能调用一次，所以MessageQueue在一个线程中只会存在一个。</li><li><code>Looper.loop()</code>会让当前线程进入一个无限循环，不端从MessageQueue的实例中读取消息，然后回调<code>msg.target.dispatchMessage(msg)</code>方法。</li><li>Handler的构造方法，会首先得到当前线程中保存的Looper实例，进而与Looper实例中的MessageQueue想关联。</li><li>Handler的sendMessage方法，会给msg的target赋值为handler自身，然后加入MessageQueue中。</li><li>在构造Handler实例时，我们会重写handleMessage方法，也就是<code>msg.target.dispatchMessage(msg)</code>最终调用的方法。</li></ul><hr><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="Hanlder-Thread"><a href="#Hanlder-Thread" class="headerlink" title="Hanlder + Thread"></a>Hanlder + Thread</h3><p>Handler可以把一个Message对象或者Runnable对象压入到消息队列中，进而在UI线程中获取Message或者执行Runnable对象，Handler把压入消息队列有两类方式，Post和sendMessage：</p><p>post:<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">super</span>.run();</span><br><span class="line">          <span class="comment">//... 子线程</span></span><br><span class="line">          mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  <span class="comment">//... UI线程</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>sendMessage:<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">super</span>.run();</span><br><span class="line">          <span class="comment">//... 子线程</span></span><br><span class="line">          mHandler.sendMessage(Message.obtain());</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mHandler = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h3 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h3><p>AsyncTask是android提供的轻量级的异步类,可以直接继承AsyncTask，在类中实现异步操作，并提供接口反馈当前异步执行的程度(可以通过接口实现UI进度更新)，最后反馈执行的结果给UI主线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> AsyncTask&lt;Integer, Integer, String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">super</span>.onPreExecute();</span><br><span class="line">               <span class="comment">//第一个执行方法</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">protected</span> String <span class="title">doInBackground</span><span class="params">(Integer... params)</span> </span>&#123;</span><br><span class="line">               <span class="comment">//第二个执行方法,onPreExecute()执行完后执行</span></span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">super</span>.onProgressUpdate(values);</span><br><span class="line">               <span class="comment">//这个函数在doInBackground调用,获取进度</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">super</span>.onPostExecute(s);</span><br><span class="line">               <span class="comment">//doInBackground返回时触发，换句话说，就是doInBackground执行完后触发</span></span><br><span class="line">               <span class="comment">//这里的result就是上面doInBackground执行后的返回值，所以这里是"执行完毕"</span></span><br><span class="line">           &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><p>ThreadPoolExecutor提供了一组线程池，可以管理多个线程并行执行。这样一方面减少了每个并行任务独自建立线程的开销，另一方面可以管理多个并发线程的公共资源，从而提高了多线程的效率。所以ThreadPoolExecutor比较适合一组任务的执行。Executors利用工厂模式对ThreadPoolExecutor进行了封装，使用起来更加方便。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Executors.newFixedThreadPool()</span><br><span class="line"><span class="comment">//创建一个定长的线程池，每提交一个任务就创建一个线程，直到达到池的最大长度，这时线程池会保持长度不再变化</span></span><br><span class="line">Executors.newCachedThreadPool()</span><br><span class="line"><span class="comment">//创建一个可缓存的线程池，如果当前线程池的长度超过了处理的需要时，它可以灵活的回收空闲的线程，当需要增加时，</span></span><br><span class="line"><span class="comment">//它可以灵活的添加新的线程，而不会对池的长度作任何限制</span></span><br><span class="line">Executors.newScheduledThreadPool()</span><br><span class="line"><span class="comment">//创建一个定长的线程池，而且支持定时的以及周期性的任务执行，类似于Timer</span></span><br><span class="line">Executors.newSingleThreadExecutor()</span><br><span class="line"><span class="comment">//创建一个单线程化的executor，它只创建唯一的worker线程来执行任务</span></span><br></pre></td></tr></table></figure><h3 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h3><p>IntentService继承自Service，是一个经过包装的轻量级的Service，用来接收并处理通过Intent传递的异步请求。客户端通过调用startService(Intent)启动一个IntentService，利用一个work线程依次处理顺序过来的请求，处理完成后自动结束Service。</p><p>IntentService 继承自普通 Service 同时又在内部创建了一个 HandlerThread，在 onHandlerIntent()的回调里面处理扔到 IntentService 的任务。所以 IntentService 就不仅仅具备了异步线程的特性，还同时保留了 Service 不受主页面生命周期影响的特点。</p><p>使用 IntentService 需要特别留意以下几点：</p><ul><li><p>首先，因为 IntentService 内置的是 HandlerThread 作为异步线程，所以每一个交给 IntentService 的任务都将以队列的方式逐个被执行到，一旦队列中有某个任务执行时间过长，那么就会导致后续的任务都会被延迟处理。</p></li><li><p>其次，通常使用到 IntentService 的时候，我们会结合使用 BroadcastReceiver 把工作线程的任务执行结果返回给主 UI 线程。使用广播容易引起性能问题，我们可以使用 LocalBroadcastManager 来发送只在程序内部传递的广播，从而提升广播的性能。我们也可以使用 runOnUiThread() 快速回调到主 UI 线程。</p></li><li><p>最后，包含正在运行的 IntentService 的程序相比起纯粹的后台程序更不容易被系统杀死，该程序的优先级是介于前台程序与纯后台程序之间的。</p></li></ul><hr><h3 id="View-post"><a href="#View-post" class="headerlink" title="View.post()"></a>View.post()</h3><p><code>View.post(Runnable)</code>方法。在post(Runnable action)方法里，View获得当前线程（即UI线程）的Handler，然后将action对象post到Handler里。在Handler里，它将传递过来的action对象包装成一个Message（Message的callback为action），然后将其投入UI线程的消息循环中。在Handler再次处理该Message时，有一条分支（未解释的那条）就是为它所设，直接调用runnable的run方法。而此时，已经路由到UI线程里，因此，我们可以毫无顾虑的来更新UI。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cppblog.com/fwxjj/archive/2010/05/31/116787.html" target="_blank" rel="noopener">浅析Android线程模型</a></p><p><a href="http://android.blog.51cto.com/268543/343823" target="_blank" rel="noopener">有关Android线程的学习</a></p><p><a href="http://www.jianshu.com/p/2b634a7c49ec" target="_blank" rel="noopener">Android 多线程的四种方式</a></p><p><a href="http://www.cnblogs.com/bugly/p/5519510.html" target="_blank" rel="noopener">Android性能优化典范之多线程篇</a></p>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/10/29/android-multi-thread/#disqus_thread</comments>
    </item>
    
    <item>
      <title>FlexboxLayout的封装过程</title>
      <link>https://cosmeapp.github.io/2017/10/29/google-flexbox-layout/</link>
      <guid>https://cosmeapp.github.io/2017/10/29/google-flexbox-layout/</guid>
      <pubDate>Sun, 29 Oct 2017 14:22:49 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h2 id=&quot;什么是FlexboxLayout&quot;&gt;&lt;a href=&quot;#什么是FlexboxLayout&quot; class=&quot;headerlink&quot; title=&quot;什么是FlexboxLayout&quot;&gt;&lt;/a&gt;什么是FlexboxLayout&lt;/h2&gt;&lt;p&gt;&lt;a
          
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="什么是FlexboxLayout"><a href="#什么是FlexboxLayout" class="headerlink" title="什么是FlexboxLayout"></a>什么是FlexboxLayout</h2><p><a href="https://github.com/google/flexbox-layout" target="_blank" rel="noopener">FlexboxLayout</a>是Google开源出来的一个控件。</p><blockquote><p>FlexboxLayout is a library project which brings the similar capabilities of CSS Flexible Box Layout Module to Android.</p></blockquote><p>上面大致的意思是FLexboxLayout是一个能为android带来类似CSS Flexbox 布局类似的能力的组件。</p><p>根据官方的说明，在使用FlexboxLayout之前，我们需要了解CSS Flexbox属性。以下是了解Flexbox的链接，需要各位了解：</p><ol><li><a href="http://cssreference.parryqiu.com/flexbox/" target="_blank" rel="noopener">CSS Flexbox 介绍</a></li><li><a href="http://flexboxfroggy.com/#zh-cn" target="_blank" rel="noopener">FLEXBOX FROGGY玩游戏学flex</a></li><li><a href="https://github.com/huixisheng/flexbox" target="_blank" rel="noopener">Flexbox相关收集</a></li></ol><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><img src="https://raw.githubusercontent.com/HuangYuSherry/sketch/master/demo.png" alt="image"></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>实例中说明FlexboxLayout可以来实现首页功能按钮的多行布局（<strong>解决RecyclerView嵌套问题</strong>），流式布局（<strong>代替<a href="https://github.com/hongyangAndroid/FlowLayout" target="_blank" rel="noopener">hongyang 的FlowLayout</a>，官方的功能性更强</strong>）,前两个场景应该还我们开发过程经常会碰到的，当然还有很多使用场景。</p><h2 id="封装过程"><a href="#封装过程" class="headerlink" title="封装过程"></a>封装过程</h2><p>我封装的目的是为了使用方便,并没有对fleboxlayout本身做内部操作。</p><h3 id="引入Flexboxlayout"><a href="#引入Flexboxlayout" class="headerlink" title="引入Flexboxlayout"></a>引入Flexboxlayout</h3><p>在项目的build.gradle添加一下代码:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile &apos;com.google.android:flexbox:0.3.1&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="创建Adapter适配器"><a href="#创建Adapter适配器" class="headerlink" title="创建Adapter适配器"></a>创建Adapter适配器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public abstract class FlexBoxAdapter&lt;T extends FlexBoxViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    public abstract T onCreateViewHolder(ViewGroup parent);</span><br><span class="line"></span><br><span class="line">    public abstract void onHandleLayoutParams(View view, int spanCount, int position);</span><br><span class="line"></span><br><span class="line">    public abstract void onBindViewHolder(T holder, int position);</span><br><span class="line"></span><br><span class="line">    public abstract int getCount();</span><br><span class="line"></span><br><span class="line">    private final DataSetObservable mDataSetObservable = new DataSetObservable();</span><br><span class="line"></span><br><span class="line">    public void registerDataSetObserver(DataSetObserver observer) &#123;</span><br><span class="line">        mDataSetObservable.registerObserver(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void unregisterDataSetObserver(DataSetObserver observer) &#123;</span><br><span class="line">        mDataSetObservable.unregisterObserver(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void notifyDataSetChanged() &#123;</span><br><span class="line">        mDataSetObservable.notifyChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用adapter是了为控件提供数据的来源，将数据和View本身分离，对实现者来说操作层面上只需要关注<strong>onCreateViewHolder()</strong>,<strong>onBindViewHolder()</strong>，<strong>onHandleLayoutParams()</strong>,熟悉RecyclerView的人来说能理解前两个方法，第三个方法是为了对子view进行Flexbox属性操作。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void onHandleLayoutParams(View view, int spanCount, int position) &#123;</span><br><span class="line">        FlexboxLayout.LayoutParams lp = (FlexboxLayout.LayoutParams) view.getLayoutParams();</span><br><span class="line">        if ((position) % spanCount == 0) &#123;</span><br><span class="line">            lp.setWrapBefore(true);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            lp.setWrapBefore(false);</span><br><span class="line">        &#125;</span><br><span class="line">        view.setLayoutParams(lp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面的属性是调用者主动让子View换行。使用情景可以首页功能按钮为多行。</p><p>###封装FlexboxLayout<br>核心代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public void setAdapter(FlexBoxAdapter adapter) &#123;</span><br><span class="line">       if (mAdapter != null &amp;&amp; mDataSetObserver != null) &#123;</span><br><span class="line">           mAdapter.unregisterDataSetObserver(mDataSetObserver);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       mAdapter = adapter;</span><br><span class="line"></span><br><span class="line">       if (mAdapter != null) &#123;</span><br><span class="line">           mDataSetObserver = new AdapterDataSetObserver();</span><br><span class="line">           mAdapter.registerDataSetObserver(mDataSetObserver);</span><br><span class="line">           removeAllViews();</span><br><span class="line">           mHolders.clear();</span><br><span class="line">           refreshView();</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           throw new NullPointerException(&quot;adapter 不可为空&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   private void refreshView() &#123;</span><br><span class="line">       mCurItemCount = mAdapter.getCount();</span><br><span class="line">       if (mCurItemCount &gt; 0) &#123;</span><br><span class="line">           for (int i = 0; i &lt; mCurItemCount; i++) &#123;</span><br><span class="line">               final FlexBoxViewHolder holder = createViewHolder(i);</span><br><span class="line"></span><br><span class="line">               onHandleItmViewListener(i, holder);</span><br><span class="line"></span><br><span class="line">               mAdapter.onHandleLayoutParams(holder.itemView, mSpanCount, i);</span><br><span class="line"></span><br><span class="line">               mAdapter.onBindViewHolder(holder, i);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           removeAllViews();</span><br><span class="line">           mHolders.clear();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 创建ViewHolder</span><br><span class="line">    *</span><br><span class="line">    * @param position</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   private FlexBoxViewHolder createViewHolder(int position) &#123;</span><br><span class="line"></span><br><span class="line">       FlexBoxViewHolder holder = null;</span><br><span class="line">       if (mHolders.size() &gt; position) &#123;</span><br><span class="line">           holder = mHolders.get(position);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       if (holder == null) &#123;</span><br><span class="line">           holder = mAdapter.onCreateViewHolder(this);</span><br><span class="line">           if (holder.itemView.getParent() == null) &#123;// 未添加到父布局中需要添加，已经添加的不需要再次添加</span><br><span class="line">               this.addView(holder.itemView, position);</span><br><span class="line">           &#125;</span><br><span class="line">           mHolders.add(holder);</span><br><span class="line">       &#125;</span><br><span class="line">       return holder;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    private void notifyDataSetChanged() &#123;</span><br><span class="line">       if (getChildCount() &gt; mAdapter.getCount()) &#123;</span><br><span class="line">           removeViewAt(getChildCount() - mAdapter.getCount());</span><br><span class="line">       &#125;</span><br><span class="line">       refreshView();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里开放setAdapter()供调用者使用，接下来做的操作解释创建View，添加View，对View进行数据操作，这方面可以对照<strong>onCreateViewHolder()</strong>,<strong>onBindViewHolder()</strong>两个方法理解。</p><h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flexboxLayout.setOnFlexBoxItemClickListener(new OnFlexBoxItemClickListener() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onItemClick(View view, int position) &#123;</span><br><span class="line">               //@todo</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><h3 id="调用代码"><a href="#调用代码" class="headerlink" title="调用代码"></a>调用代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UIFlexBoxView tagView = findViewById(R.id.tag_view);</span><br><span class="line">TagFlexBoxAdapter  adapter = new TagFlexBoxAdapter(tagList.getTags());</span><br><span class="line">tagView(adapter);</span><br></pre></td></tr></table></figure><h3 id="关于NotifyDataSetChanged"><a href="#关于NotifyDataSetChanged" class="headerlink" title="关于NotifyDataSetChanged()"></a>关于NotifyDataSetChanged()</h3><p>notifyDataSetChanged() 这边是为了减少View的创建，并没有实现RecyclerView的View复用的效果。当然你依然可以在数据变化后依然调用setAdapter(),在正常情况下并不影响使用效果。</p><p><a href="https://github.com/shamao/Beauty/tree/master/app/src/main/java/beauty/louise/com/view/flexbox" target="_blank" rel="noopener">github项目地址</a></p>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/10/29/google-flexbox-layout/#disqus_thread</comments>
    </item>
    
    <item>
      <title>撸一个插件来解析视频地址</title>
      <link>https://cosmeapp.github.io/2017/10/28/use-chrome-ext-get-video-address/</link>
      <guid>https://cosmeapp.github.io/2017/10/28/use-chrome-ext-get-video-address/</guid>
      <pubDate>Sat, 28 Oct 2017 15:00:19 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;p&gt;最近暇余时间帮朋友写了一个解析视频地址用的chrome插件，对chrome插件开发又有了一些新的认识，记录并分享之。&lt;/p&gt;&lt;h2 id=&quot;故事开头&quot;&gt;&lt;a href=&quot;#故事开头&quot; class=&quot;headerlink&quot;
          
        
      
      </description>
      
      <content:encoded><![CDATA[<p>最近暇余时间帮朋友写了一个解析视频地址用的chrome插件，对chrome插件开发又有了一些新的认识，记录并分享之。</p><h2 id="故事开头"><a href="#故事开头" class="headerlink" title="故事开头"></a>故事开头</h2><p>事情是这样的，有一位朋友，因为工作需要，不时的要在兄弟单位的网站上下载文章里的视频。网页本身没有下载渠道，所以就会丢给我一个地址，让我帮忙下载。</p><p>其实下载这些视频本身并不复杂，但是本着能懒则懒的精神，我还是决定用代码来解放双手，实现一劳永逸的伟大目标。</p><p>考虑了一下易用性和开发成本之后，我决定开发一个chrome插件。不为什么，简单好用，还能跑在其他webkit内核的浏览器上，简直完美。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>故事先告一段落，言归正传，还是先来理一理思路。</p><p>万事开头……难不难我不知道，不过不慌，先来分析一下。</p><p>我需要的是一个傻瓜式的插件，点一下鼠标就能显示出来视频的下载地址，还要有一些基本信息，好让用的人知道自己会下载到什么东西。另外，最好对目标网站做一个限制，只能在特定的网站使用。</p><p>需求有了，基本的开发思路也就出来了。首先我需要一个右键菜单来进行交互，其次要拦截下请求视频的接口，方便获取视频相关的信息，然后就是展示环节，做一个简单的界面用于展示，动态插入到DOM中，完成展示。</p><p>OK，Let’s do it～</p><h2 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h2><p>Chrome插件开发就不介绍了，详请参见：<a href="https://developer.chrome.com/extensions" target="_blank" rel="noopener">官方文档</a></p><p>这里用到了background_script和content_script相互配合，还有一些插件内的通信、webRequest API等。background_script负责创建右键菜单、拦截请求，content_script负责发送请求和操作DOM生成展示页面。</p><p>先在<code>background.js</code>里初始化一个右键菜单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chrome.contextMenus.create(&#123;</span><br><span class="line">  title: <span class="string">''</span>, <span class="comment">// 右键菜单名</span></span><br><span class="line">  documentUrlPatterns : [<span class="string">'http://*.*.com/*'</span>] <span class="comment">// 配置在哪些网站可以显示这个右键菜单，可以使用通配符</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>利用webRequest API拦截请求，并给右键菜单添加一个监听，通过chrome的拓展内通信发送消息给<code>content_script.js</code>，传递拦截到的请求信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chrome.webRequest.onBeforeRequest.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">  chrome.contextMenus.onClicked.addListener(<span class="function"><span class="keyword">function</span> (<span class="params">info, tab</span>) </span>&#123;</span><br><span class="line">    chrome.tabs.sendMessage(tab.id, req.url);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">  urls: [<span class="string">'http://*.*.com/*'</span>] <span class="comment">// 需要过滤的地址,同样可以使用通配符</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在<code>content_script.js</code>里接受消息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chrome.runtime.onMessage.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">msg, sender, sendResponse</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// code....</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后就是请求接口获取视频信息了，可以用XHR，也可以用jquery等等，我用的jquery。</p><p>请求时发现，获取到的地址并不是真的下载地址，我就上硕鼠解析了一下这个地址，成功获得真实下载地址。But，总不能每次拿到地址还要手动去硕鼠解析一下吧，辣岂不是太麻烦了。</p><p>于是咨询了一下硕鼠官方有没有开放相关的API，给的回复是“没有开放API，只提供企业服务”。好吧，没有开放就没有开放吧，办法总是有的不是。</p><p>分析了一下硕鼠的地址，发现解析的接口用的是get请求，有两个关键的参数<code>kw</code> 和 <code>format</code>。<code>kw</code>的值是要解析的地址，<code>format</code>是解析的画质，有原画、超清、高清和普请四种，值分别是real、super、high和空。</p><p>OK，万事俱备，伪造一个请求，去硕鼠获取真实的地址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">'http://www.flvcd.com/parse.php'</span>, &#123;</span><br><span class="line">  kw: url,</span><br><span class="line">  flag: <span class="string">'one'</span>,</span><br><span class="line">  format: <span class="string">'real'</span>,</span><br><span class="line">  lang: <span class="string">'zh_CN'</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// code...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>返回的是整个网页，不要紧，用正则把我们需要的信息匹配出来就好（正则大法好！！！）。</p><p>获取到数据，然后就是展示啦，最后的效果就像这样，简约大气，没毛病！</p><p><img src="https://image.tracup.com/snapshot_1509196144722.png" alt=""></p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>经过朋友的亲身检验，插件成功跑在了360浏览器上，工作正常。</p><p>完结，撒花！</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>Chrome插件官方文档：<a href="https://developer.chrome.com/extensions" target="_blank" rel="noopener">https://developer.chrome.com/extensions</a></p><p>非官方中文翻译：<a href="https://crxdoc-zh.appspot.com/extensions/" target="_blank" rel="noopener">https://crxdoc-zh.appspot.com/extensions/</a></p>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/10/28/use-chrome-ext-get-video-address/#disqus_thread</comments>
    </item>
    
    <item>
      <title>软件测试基础整理</title>
      <link>https://cosmeapp.github.io/2017/10/26/software-test-basis/</link>
      <guid>https://cosmeapp.github.io/2017/10/26/software-test-basis/</guid>
      <pubDate>Thu, 26 Oct 2017 16:00:00 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;p&gt;app测试做了一年，既然要写博客，开篇就来整理一下软件测试的基础知识，回顾巩固一下。本篇博客有借鉴也有自己的想法，希望可以多交流交流&lt;/p&gt;&lt;h2 id=&quot;什么是软件测试&quot;&gt;&lt;a href=&quot;#什么是软件测试&quot; class=&quot;headerlink&quot;
          
        
      
      </description>
      
      <content:encoded><![CDATA[<p>app测试做了一年，既然要写博客，开篇就来整理一下软件测试的基础知识，回顾巩固一下。本篇博客有借鉴也有自己的想法，希望可以多交流交流</p><h2 id="什么是软件测试"><a href="#什么是软件测试" class="headerlink" title="什么是软件测试"></a>什么是软件测试</h2><p>对我来说，最好记，最合理的解释是：<code>软件测试是一种实际输出与预期输出之间的审核或者比较过程，使用人工操作或软件自动运行的方式</code>（百度百科的定义）。为什么这么说呢，因为<code>bug描述有4要素：前提条件，操作步骤，预期结果，当前结果</code>，也对应了测试用例中的要素点，举个例子，这样描述bug显得条理清楚，有木有？</p><blockquote><p>bug描述：<br>前提：删除的评论在热门评论中<br>操作：所有评论页面，点击‘删除’按钮<br>预期结果：热门评论和最新评论中的评论都被删除<br>当前结果：仅最新评论中的被删除</p></blockquote><h2 id="软件测试的目的"><a href="#软件测试的目的" class="headerlink" title="软件测试的目的"></a>软件测试的目的</h2><p>就我的理解，软件测试的目的是：1.测试开发的功能是否符合需求，因为需求文档就是你测试的标准，不符合的就是bug；2.确认软件的质量<br>常规解释：测试的目的是为了发现尽可能多的bug，成功的测试在于发现了迄今尚未发现的bug，保证软件的质量；<br>功能测试完成后，以用户的身份来运行app，看功能是否符合使用规范，使用起来是否方便，用户使用app无非就是图个实用或者interesting，可以将自己的使用心得告诉产品经理，作为参考。</p><h2 id="软件测试的过程"><a href="#软件测试的过程" class="headerlink" title="软件测试的过程"></a>软件测试的过程</h2><p>总结起来，也是4个步骤：需求评审–设计用例–用例测试–bug提交及验证</p><ul><li>需求评审：因为我不需要参加需求讨论，所以这一步对我来说就是“啃”需求文档，需求了解的越深，测试时考虑的会更多更全面；不同公司会有不同的规定，但殊途同归，这一步的目的都是读懂需求，知道你的测试标准；</li><li>设计用例：根据需求分析，利用等价类划分法等方法设计用例，尽可能的覆盖可能发生的情况；</li><li>用例测试：根据测试用例测试已开发的功能；</li><li>bug提交及验证：上边已经说了，bug描述有4个要素点:前提条件，操作步骤，预期结果，当前结果，提交的bug让开发能看懂就算是成功了；验证bug后记得修改bug状态，修改好了就关闭，仍有bug就重新打开并修改bug描述。</li></ul><h2 id="测试用例二三事！"><a href="#测试用例二三事！" class="headerlink" title="测试用例二三事！"></a>测试用例二三事！</h2><h3 id="1-bug管理工具"><a href="#1-bug管理工具" class="headerlink" title="1.bug管理工具"></a>1.bug管理工具</h3><p>刚开始使用的平台是我们后台自主开发的QC平台，因为要升级，目前使用的是蒲公英的tracup平台<br>界面如下：</p><p><img src="/images/test_pic/tracup.jpeg" alt="tracup"><br>要素点已在上图标注,不管是什么平台，要素点都是一样的：项目名称、问题类型（一般为bug）、主题、bug描述、优先级、版本号、指派人</p><h3 id="2-测试用例编写规范"><a href="#2-测试用例编写规范" class="headerlink" title="2.测试用例编写规范"></a>2.测试用例编写规范</h3><p>刚开始编写测试用例时，只有一个模板，怎么写只能靠自己摸索，推荐几篇短小但是切合实际工作的<br><a href="http://blog.csdn.net/xiaofuruo/article/details/41750161" target="_blank" rel="noopener">手机app测试记录一</a><br><a href="http://www.jianshu.com/p/86f2f22cbe99?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note&amp;utm_source=weixin-friends" target="_blank" rel="noopener">输入框常见bug</a><br><a href="http://www.cnblogs.com/m317/p/6274093.html" target="_blank" rel="noopener">测试用例规范</a></p><p>以下是摘抄的与我的测试过程相关的</p><ol><li>初始化测试用例<br>进入功能模块（页面）后，某些空间会初始化填入数据，生成一个用例确保所有的初始数据正确。</li></ol><p><img src="/images/test_pic/1.jpeg" alt="1"></p><ol start="2"><li>边界的测试用例<br>每个数据项，生成一个边界用例（含最大／最小两个边界值）<br>字符串数据以字符串长度为计量单位<br>布尔值数据的所有取值都需测试<br>多个复选框一组时，需测同时被选中及都不被选中<br>下拉菜单、列表框、单选按钮组为最大、最小的2个取值</li><li>空值的测试用例<br>对于每个必填数据项，（不提供空值的除外）都生成一个用例，则预期结果提示该数据项为空。</li></ol><p><img src="/images/test_pic/23.jpeg" alt="23"></p><ol start="4"><li>格式错误的测试用例<br>对于输入框数据项，都生成一个用例，预期结果提示该数据项格式错误<br>日期／数字／字符串输入框<br>Email、邮编、用户名等带格式要求</li><li>溢出的测试用例<br>对于输入框数据项，都生成一个取值范围外的测试用例，预期结果提示该数据项超出范围<br>日期输入框：需添加上边界日期小于下边界日期的用例<br>数字输入框：如‘金额’一般为正整数，填入一个负数<br>字符串输入框：超出规定长度的字符串</li><li>关联的测试用例<br>对于相互关联的两个或多个数据项，生成一个用例，确保当一个数据项改变时，其它数据项的变化正确。</li><li>唯一值的测试用例<br>某些业务的数据字段要求是唯一的，生成一个或两个用例（新建，编辑），使得输入数据与原有数据在该字段重复，预期结果为返回该数据已存在的提示</li></ol><p><img src="/images/test_pic/7.jpeg" alt="7"></p><ol start="8"><li>权限不足的测试用例<br>对于功能模块，生成一个用例，以没有权限的用户身份访问，预期结果为提示权限不足</li><li>角色全新的测试用例<br>业务功能流程涉及一到多个角色，对于每个角色，都生成一个用例，预期结果为用户以这个角色登录时，他仅能执行权限允许的操作。</li></ol><h3 id="测试用例设计方法"><a href="#测试用例设计方法" class="headerlink" title="测试用例设计方法"></a>测试用例设计方法</h3><p>黑盒测试常用设计方法：等价类划分法、边界值分析法、错误猜测法、因果图法</p><h4 id="等价类划分法"><a href="#等价类划分法" class="headerlink" title="等价类划分法"></a>等价类划分法</h4><blockquote><p>等价类划分法是把所有可能输入的数据，即程序的输入域划分为若干部分（子集），然后从每个子集中选取少数具有代表性的数据作为测试用例</p><ul><li>等价类分为：有效等价类和无效等价类</li><li>有效等价类：指对程序的规格说明来说是合理的、有意义的输入数据的集合</li><li>无效等价类：指对程序的规格说明来说是不合理的或无意义的输入数据的集合。无效等价类可能有1个或多个</li></ul></blockquote><p>转化为测试用例：<br>在确立了等价类后，可建立等价类表，列出所有划分出的等价类输入条件：有效等价类、无效等价类，然后从划分出的等价类中按一下三个原则设计测试用例：</p><ol><li>为每个等价类规定一个唯一编号；</li><li>设计一个新的测试用例，使其<code>尽可能多地覆盖</code>尚未被覆盖的有效等价类，重复这一步，直到所有的有效等价类都被覆盖为止；</li><li>设计一个新的测试用例，使其<code>仅覆盖一个</code>尚未被覆盖的无效等价类，重复这一步，直到所有的无效等价类都被覆盖为止。</li></ol><p>例如：输入密码的测试用例<br>在我们的app中，密码个数规定要输入6-16位，则可以列出一个不等式：6&lt;=x&lt;=16<br>有效等价类为：[6，16]<br>无效等价类为：[0，6），（16，无穷）<br>等价类判断出来后就是选择代表性的数据来写测试用例，通常代表性的数据与边界值有关，选取正好等于，刚刚大于或刚刚小于边界的值作为测试数据。<br>最后选择的数据为：0，5，6，17<br>则测试用例为：密码为0/5/6/17位数的测试</p><h4 id="边界值分析法"><a href="#边界值分析法" class="headerlink" title="边界值分析法"></a>边界值分析法</h4><blockquote><p>边界值分析法就是<code>对输入或输出边界值进行测试</code>的一种黑盒测试方法。该方法通常作为等价类划分法的补充，这种情况下，其测试用例来自等价类的边界</p></blockquote><p>学习边界值的时候顺便了解一下<a href="http://yzylion.blog.163.com/blog/static/89406994200892784325898/" target="_blank" rel="noopener">什么是上点，内点，离点</a></p><h4 id="因果图法"><a href="#因果图法" class="headerlink" title="因果图法"></a>因果图法</h4><blockquote><p>因果图法适合<code>输入域较多而输入域之间又存在互相影响的关系</code>。<br>因果图法就是找出输入因子以及其间的影响关系，确定每组输入因子所应输出的结果，画出<code>因果图</code>，转换成<code>判定表</code>，然后生成测试用例的一个测试方法</p></blockquote><p>因果关系：恒等、与或非逻辑关系，<br>因之间的约束关系：逻辑异、逻辑或、唯一关系、限制关系、要求关系，具体可以参考这篇文章：<a href="http://blog.sina.com.cn/s/blog_560ddb8501000a9c.html" target="_blank" rel="noopener">实例介绍因果图法</a></p><h4 id="错误推测法"><a href="#错误推测法" class="headerlink" title="错误推测法"></a>错误推测法</h4><blockquote><p>错误推测法是<code>基于经验和直觉</code>推测程序中所有可能存在的各种错误，从而有针对性的设计测试用例的方法</p></blockquote><p>所以使用错误推测法的前提就是经验的积累！</p><h4 id="测试方法实例"><a href="#测试方法实例" class="headerlink" title="测试方法实例"></a>测试方法实例</h4><p>一个功能的测试用例大多会涉及多个方法，例如：我们app的密码登录</p><p><img src="/images/test_pic/%E7%99%BB%E5%BD%95.jpeg" alt="登录"></p><p>首先要了解登录相关需求，在这只显示一下填写规则，从规则中总结输入条件<br><img src="/images/test_pic/%E5%A1%AB%E5%86%99%E8%A7%84%E5%88%99.jpeg" alt="填写规则"></p><p>输入不同的手机号和密码，点击登录，会有不同的toast显示，所以结果有很多，先确定一下手机号和密码的关系：手机号格式正确后才会对密码做判断，所以联系如下图：<br><img src="/images/test_pic/%E8%81%94%E7%B3%BB.jpeg" alt="联系"></p><p>大关系确定后就要扣小细节了，根据边界值法和等价类分界法，手机号和密码分别设计测试用例可以分为以下几种情况：</p><p><img src="/images/test_pic/%E4%BB%A3%E8%A1%A8%E6%95%B0%E6%8D%AE.jpeg" alt="代表数据"></p><p>接下来就是设计用例的总结，根据手机号密码联系图，<br>第一列可设计1个测试用例，<br>第三列仅看手机号就可以，0个手机号可归到第一个测试用例，所以这一列可以设置3个测试用例<br>第四列就有点复杂了，不过因为判断密码的前提是手机号有效，所以范围又缩小了，这一块可以做个判定表，然后删除冗余的，这个也不难，所以我就不做了，最后的测试用例如下：</p><p><img src="/images/test_pic/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B.jpeg" alt="测试用例"></p><p>基础知识就回顾到这，希望大家可以多多交流，如果有说的不对的地方，尽情回复！</p>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/10/26/software-test-basis/#disqus_thread</comments>
    </item>
    
    <item>
      <title>美妆心得技术周刊2017-10-09</title>
      <link>https://cosmeapp.github.io/2017/10/09/weekly-2017-10-08/</link>
      <guid>https://cosmeapp.github.io/2017/10/09/weekly-2017-10-08/</guid>
      <pubDate>Mon, 09 Oct 2017 07:31:25 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;blockquote&gt;&lt;p&gt;安卓&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Android通用圆角布局&lt;a
          
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>安卓</p></blockquote><p>Android通用圆角布局<a href="https://juejin.im/entry/59d73506f265da0668762574?utm_source=gold_browser_extension" target="_blank" rel="noopener">https://juejin.im/entry/59d73506f265da0668762574?utm_source=gold_browser_extension</a></p><p>自定义 View 1-6：属性动画 <a href="https://www.bilibili.com/video/av14207821/" target="_blank" rel="noopener">https://www.bilibili.com/video/av14207821/</a></p><p>Android样式开发：shape <a href="https://keeganlee.me/post/android/20150830" target="_blank" rel="noopener">https://keeganlee.me/post/android/20150830</a></p><p>Android 中的Interpolator <a href="http://www.cnblogs.com/mengdd/p/3346003.html" target="_blank" rel="noopener">http://www.cnblogs.com/mengdd/p/3346003.html</a></p><blockquote><p>前端</p></blockquote><p>Vue.js 中，7种定义组件模板的方法 <a href="https://mp.weixin.qq.com/s?__biz=MzA4NjE3MDg4OQ==&amp;mid=2650964851&amp;idx=1&amp;sn=4d434fcd02a5354b6a713cb96d3435ec&amp;chksm=843aef15b34d6603d0f51d0a70c0010c939fc506ed69305cf420c305425bd2ba5e4e67fc7de4&amp;mpshare=1&amp;scene=1&amp;srcid=0724QEfqhBqka3aZiGbJp7an#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzA4NjE3MDg4OQ==&amp;mid=2650964851&amp;idx=1&amp;sn=4d434fcd02a5354b6a713cb96d3435ec&amp;chksm=843aef15b34d6603d0f51d0a70c0010c939fc506ed69305cf420c305425bd2ba5e4e67fc7de4&amp;mpshare=1&amp;scene=1&amp;srcid=0724QEfqhBqka3aZiGbJp7an#rd</a></p><p>前端HTML5几种存储方式的总结 <a href="http://www.admin10000.com/document/9261.html" target="_blank" rel="noopener">http://www.admin10000.com/document/9261.html</a></p><p>前端分享技术大会资源整理 <a href="https://github.com/huixisheng/awesome-conf" target="_blank" rel="noopener">https://github.com/huixisheng/awesome-conf</a></p><p>文档生成工具整理 <a href="https://github.com/huixisheng/x-docs-tools" target="_blank" rel="noopener">https://github.com/huixisheng/x-docs-tools</a></p><blockquote><p>测试</p></blockquote><p>输入框常见bug：<a href="http://www.jianshu.com/p/86f2f22cbe99?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note&amp;utm_source=weixin-friends" target="_blank" rel="noopener">http://www.jianshu.com/p/86f2f22cbe99?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note&amp;utm_source=weixin-friends</a></p><p>干了这碗蛋炒饭 继续APP性能提升（1）：<a href="http://www.jianshu.com/p/11911c931efc?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note&amp;utm_source=weixin-friends" target="_blank" rel="noopener">http://www.jianshu.com/p/11911c931efc?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note&amp;utm_source=weixin-friends</a></p><blockquote><p>产品及其他</p></blockquote><p>如何评价 CloudXNS 未实名用户停止解析？ <a href="https://www.zhihu.com/question/66028822" target="_blank" rel="noopener">https://www.zhihu.com/question/66028822</a></p><p>什么是域名规范化? <a href="https://www.zhihu.com/question/53838228" target="_blank" rel="noopener">https://www.zhihu.com/question/53838228</a></p><p>以手机淘宝为例，看原型图易缺失的交互场景 <a href="http://www.woshipm.com/rp/798263.html" target="_blank" rel="noopener">http://www.woshipm.com/rp/798263.html</a></p><p>运营思考：如何优雅的“蹭热度” <a href="http://www.woshipm.com/operate/804446.html" target="_blank" rel="noopener">http://www.woshipm.com/operate/804446.html</a></p><p><strong>本周刊由团队成员推荐整理而成，内容来自互联网</strong></p>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/10/09/weekly-2017-10-08/#disqus_thread</comments>
    </item>
    
    <item>
      <title>美妆心得技术周刊2017-09-30</title>
      <link>https://cosmeapp.github.io/2017/09/30/weekly-2017-09-30/</link>
      <guid>https://cosmeapp.github.io/2017/09/30/weekly-2017-09-30/</guid>
      <pubDate>Sat, 30 Sep 2017 07:16:45 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;blockquote&gt;&lt;p&gt;安卓&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;网易严选 App 感受 Weex 开发 &lt;a href=&quot;https://mp.weixin.qq.com/s/uH1vaNCaVlyhq0x4IYSQIg&quot; target=&quot;_blank&quot;
          
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>安卓</p></blockquote><p>网易严选 App 感受 Weex 开发 <a href="https://mp.weixin.qq.com/s/uH1vaNCaVlyhq0x4IYSQIg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/uH1vaNCaVlyhq0x4IYSQIg</a></p><p>VegaLayoutManager <a href="https://github.com/xmuSistone/VegaLayoutManagerc" target="_blank" rel="noopener">https://github.com/xmuSistone/VegaLayoutManagerc</a></p><p>android 崩溃手动处理 <a href="http://www.jianshu.com/p/c75192c77e28" target="_blank" rel="noopener">http://www.jianshu.com/p/c75192c77e28</a></p><p>Android 详细分析AppBarLayout的五种ScrollFlags <a href="http://www.jianshu.com/p/7caa5f4f49bd" target="_blank" rel="noopener">http://www.jianshu.com/p/7caa5f4f49bd</a></p><blockquote><p>IOS</p></blockquote><p>Xcode 9的一些新变化<a href="http://www.cocoachina.com/ios/20170922/20626.html" target="_blank" rel="noopener">http://www.cocoachina.com/ios/20170922/20626.html</a></p><p>iOS开发，为你的应用兼容iPhone X<a href="http://www.cocoachina.com/ios/20170920/20608.html" target="_blank" rel="noopener">http://www.cocoachina.com/ios/20170920/20608.html</a></p><p>ios11更新了，给你100＋个ios11使用技巧 <a href="http://36kr.com/p/5094158.html" target="_blank" rel="noopener">http://36kr.com/p/5094158.html</a></p><blockquote><p>前端</p></blockquote><p>关于nodejs调试 <a href="http://i5ting.github.io/node-debug-tutorial/" target="_blank" rel="noopener">http://i5ting.github.io/node-debug-tutorial/</a></p><p>给 Web 开发人员推荐的文档生成工具 <a href="https://juejin.im/entry/59c47ad7f265da065e323334" target="_blank" rel="noopener">https://juejin.im/entry/59c47ad7f265da065e323334</a></p><p>facebook修改开源协议风波 <a href="https://juejin.im/post/59c58b846fb9a00a3f24eafa" target="_blank" rel="noopener">https://juejin.im/post/59c58b846fb9a00a3f24eafa</a></p><p>JavaScript 也来挑战ACM <a href="http://blog.gfdsa.net/2014/05/18/nodejs/jsforoj/" target="_blank" rel="noopener">http://blog.gfdsa.net/2014/05/18/nodejs/jsforoj/</a></p><p>有没有可以用javascript做类似ACM算法题的平台或渠道，最好是国内的？<a href="https://www.zhihu.com/question/41108995" target="_blank" rel="noopener">https://www.zhihu.com/question/41108995</a></p><p>TypeScript体系调研报告 <a href="https://juejin.im/post/59c46bc86fb9a00a4636f939" target="_blank" rel="noopener">https://juejin.im/post/59c46bc86fb9a00a4636f939</a></p><blockquote><p>后台</p></blockquote><blockquote><p>设计</p></blockquote><p>设计师要懂的印刷知识：<a href="http://mp.weixin.qq.com/s/aROrVPWLsBzmyWMdwb6Vlw" target="_blank" rel="noopener">http://mp.weixin.qq.com/s/aROrVPWLsBzmyWMdwb6Vlw</a></p><p>90%的设计师没注意过的细节，你了解嘛？：<a href="http://mp.weixin.qq.com/s/KiZEcLTBXC_LFJ32YBbOHw" target="_blank" rel="noopener">http://mp.weixin.qq.com/s/KiZEcLTBXC_LFJ32YBbOHw</a></p><blockquote><p>工具和资源</p></blockquote><p>验证码识别Api。</p><ul><li>京东万象 <a href="https://wx.jcloud.com/market/datas/18/11701" target="_blank" rel="noopener">https://wx.jcloud.com/market/datas/18/11701</a></li><li>聚合数据 <a href="https://www.juhe.cn/docs/api/id/60" target="_blank" rel="noopener">https://www.juhe.cn/docs/api/id/60</a></li><li>开源项目 Sample</li><li><a href="https://github.com/ypwhs/captcha_break" target="_blank" rel="noopener">https://github.com/ypwhs/captcha_break</a></li><li><a href="https://github.com/ladingwu/identfying_code_recognize" target="_blank" rel="noopener">https://github.com/ladingwu/identfying_code_recognize</a></li></ul><p>sublime使用技巧 <a href="https://www.zhihu.com/question/24896283" target="_blank" rel="noopener">https://www.zhihu.com/question/24896283</a></p><p><a href="https://github.com/pandao/editor.md" target="_blank" rel="noopener">https://github.com/pandao/editor.md</a></p><p>goflyway go写的http隧道代理服务 <a href="https://github.com/coyove/goflyway" target="_blank" rel="noopener">https://github.com/coyove/goflyway</a></p><blockquote><p>产品及其他</p></blockquote><p>提升顾客忠诚度：除了改进产品，其实还有捷径可走：<a href="http://www.jianshu.com/p/8285c2ad57ae" target="_blank" rel="noopener">http://www.jianshu.com/p/8285c2ad57ae</a></p><p>如何把一件事讲得言简意赅，语出惊人，少即是多：<a href="http://www.jianshu.com/p/09f4c707e95c?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=mobile_all_hots&amp;utm_source=recommendation" target="_blank" rel="noopener">http://www.jianshu.com/p/09f4c707e95c?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=mobile_all_hots&amp;utm_source=recommendation</a></p><p>3个方法，你也能写出”共鸣文案“ <a href="http://www.woshipm.com/operate/796468.html" target="_blank" rel="noopener">http://www.woshipm.com/operate/796468.html</a></p><p><strong>本周刊由团队成员推荐整理而成，内容来自互联网</strong></p>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/09/30/weekly-2017-09-30/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Fast Scrolling with RecyclerView翻译</title>
      <link>https://cosmeapp.github.io/2017/09/27/fast-scrolling-with-recyclerview/</link>
      <guid>https://cosmeapp.github.io/2017/09/27/fast-scrolling-with-recyclerview/</guid>
      <pubDate>Wed, 27 Sep 2017 01:10:58 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;blockquote&gt;&lt;p&gt;原文来源: &lt;a href=&quot;https://android.jlelse.eu/fast-scrolling-with-recyclerview-2b89d4574688&quot; target=&quot;_blank&quot;
          
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>原文来源: <a href="https://android.jlelse.eu/fast-scrolling-with-recyclerview-2b89d4574688" target="_blank" rel="noopener">https://android.jlelse.eu/fast-scrolling-with-recyclerview-2b89d4574688</a></p></blockquote><p>这次翻译一篇来自于medium的文章，内容与recyclerView有关。</p><p>众所周知,RecyclerView对ListView有很大的优势, Recyclerview也逐步代替ListView来实现列表的效果。我十分想念一个功能——快速滚动，你可以拖动一个绘制的滑块并在列表中滚动。<br>在ListView中你可以这是做:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listView = (ListView) findViewById(R.id.listView);</span><br><span class="line">listView.setFastScrollEnabled(true);</span><br></pre></td></tr></table></figure><p>但是在RecyclerView中，没有一种简单的方式来拖动滑块实现下面的效果:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*HliXJE2zpLAXWmXusOFSSA.gif" alt="dada"></p><p>所以我们会引用第三方库比如<a href="https://github.com/FutureMind/recycler-fast-scroll" target="_blank" rel="noopener">Recycler Bubble</a>或者<a href="https://github.com/timusus/RecyclerView-FastScroll" target="_blank" rel="noopener">RecyclerView-FastScroll</a>。</p><p>随着Support Library 26的到来，我们能够轻松地实现RecyclerView快速滚动。Let’s get to it!</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*fnt26zTwl3zkAIazlNGvZw.gif" alt=""></p><p>首先我们项目得引用Support Library 26,项目中的build.gradle如下所示:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ....</span><br><span class="line">    compile &apos;com.android.support:design:26.0.1&apos;</span><br><span class="line">    compile &apos;com.android.support:recyclerview-v7:26.0.1&apos;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>由于Support Library 26现已转移到Google的maven存储库，需要在我们项目级的build.gradle文件中添加<strong>google()</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line"></span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是我们界面的布局代码,如下:</p><h4 id="content-main-xml"><a href="#content-main-xml" class="headerlink" title="content_main.xml"></a>content_main.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;android.support.constraint.ConstraintLayout</span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</span><br><span class="line">    tools:context=&quot;com.shaishavgandhi.fastscrolling.MainActivity&quot;</span><br><span class="line">    tools:showIn=&quot;@layout/activity_main&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">    android:id=&quot;@+id/recyclerView&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/android.support.v7.widget.RecyclerView&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.constraint.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure><p>我构建了一个recyclerView，其由美国各州以及其代码的mock数据填充，如下展示：</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*WwKn8Y9KQ-1EFAN324xwuw.gif" alt=""></p><p>现在让我们开始实现快速滚动,更新后的布局文件如下展示:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;android.support.constraint.ConstraintLayout</span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</span><br><span class="line">    tools:context=&quot;com.shaishavgandhi.fastscrolling.MainActivity&quot;</span><br><span class="line">    tools:showIn=&quot;@layout/activity_main&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">    android:id=&quot;@+id/recyclerView&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">    app:fastScrollEnabled=&quot;true&quot;</span><br><span class="line">    app:fastScrollHorizontalThumbDrawable=&quot;@drawable/thumb_drawable&quot;</span><br><span class="line">    app:fastScrollHorizontalTrackDrawable=&quot;@drawable/line_drawable&quot;</span><br><span class="line">    app:fastScrollVerticalThumbDrawable=&quot;@drawable/thumb_drawable&quot;</span><br><span class="line">    app:fastScrollVerticalTrackDrawable=&quot;@drawable/line_drawable&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/android.support.v7.widget.RecyclerView&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.constraint.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure><p></p><p>让我们浏览一下下面的属性：</p><ul><li><strong>fastScrollEnabled</strong> boolean类型来启动快速滚动，如果设置为true值的话将要求我们提供一下四个属性</li><li><strong>fastScrollHorizontalThumbDrawable</strong> StateListDrawable类型将被用来绘制可以在横轴可滑动的的滑块</li><li><strong>fastScrollHorizontalTrackDrawable</strong> StateListDrawable类型将被用来绘制一条表示在横轴上的scrollbar的线条（轨道 译者注0）</li><li><strong>fastScrollVerticalThumbDrawable</strong> StateListDrawable类型将被用来绘制可以在纵轴可滑动的的滑块</li><li><strong>fastScrollVerticalTrackDrawable</strong> StateListDrawable类型将被用来绘制一条表示在纵轴上的scrollbar的线条</li></ul><p><strong>后四个的属性的值需要是StateListDrawable 否则会报错</strong>（译者注）</p><p>让我们来看一下StateListDrawables ，我使用原生形状，以便<br>可以轻松地重复使用它们。</p><h4 id="line-drawable-xml"><a href="#line-drawable-xml" class="headerlink" title="line_drawable.xml"></a>line_drawable.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:state_pressed=&quot;true&quot;</span><br><span class="line">        android:drawable=&quot;@drawable/line&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;item</span><br><span class="line">        android:drawable=&quot;@drawable/line&quot;/&gt;</span><br><span class="line">&lt;/selector&gt;</span><br></pre></td></tr></table></figure><h4 id="line-xml"><a href="#line-xml" class="headerlink" title="line.xml"></a>line.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">       android:shape=&quot;rectangle&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;solid android:color=&quot;@android:color/darker_gray&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;padding</span><br><span class="line">        android:top=&quot;10dp&quot;</span><br><span class="line">        android:left=&quot;10dp&quot;</span><br><span class="line">        android:right=&quot;10dp&quot;</span><br><span class="line">        android:bottom=&quot;10dp&quot;/&gt;</span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure><h4 id="thumb-drawable-xml"><a href="#thumb-drawable-xml" class="headerlink" title="thumb_drawable.xml"></a>thumb_drawable.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:state_pressed=&quot;true&quot;</span><br><span class="line">        android:drawable=&quot;@drawable/thumb&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;item</span><br><span class="line">        android:drawable=&quot;@drawable/thumb&quot;/&gt;</span><br><span class="line">&lt;/selector&gt;</span><br></pre></td></tr></table></figure><h4 id="thumb-xml"><a href="#thumb-xml" class="headerlink" title="thumb.xml"></a>thumb.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">       android:shape=&quot;rectangle&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;corners</span><br><span class="line">        android:topLeftRadius=&quot;44dp&quot;</span><br><span class="line">        android:topRightRadius=&quot;44dp&quot;</span><br><span class="line">        android:bottomLeftRadius=&quot;44dp&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;padding</span><br><span class="line">        android:paddingLeft=&quot;22dp&quot;</span><br><span class="line">        android:paddingRight=&quot;22dp&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;solid android:color=&quot;@color/colorPrimaryDark&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure><p>效果如下所示：</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*RN2W9mpIMaFkAqs2KI5pyw.gif" alt="image"></p><p>太棒了！<br><img src="https://cdn-images-1.medium.com/max/1600/1*cK8-ghSt_uRfRvMlJNd9cw.gif" alt="image"></p><p>这是启用快速滚动的基本示例。看到我们如何自定义它以显示信件的首字母，如联系人应用程序。</p><p><a href="https://github.com/shaishavgandhi05/FastScrolling" target="_blank" rel="noopener">Demo</a></p><p>最后，happy coding。</p>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/09/27/fast-scrolling-with-recyclerview/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在安卓手机上安装Charles证书</title>
      <link>https://cosmeapp.github.io/2017/09/26/install-charles-certificate-android/</link>
      <guid>https://cosmeapp.github.io/2017/09/26/install-charles-certificate-android/</guid>
      <pubDate>Tue, 26 Sep 2017 16:27:09 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;在安卓手机上安装Charles证书&quot;&gt;&lt;a href=&quot;#在安卓手机上安装Charles证书&quot; class=&quot;headerlink&quot;
          
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="在安卓手机上安装Charles证书"><a href="#在安卓手机上安装Charles证书" class="headerlink" title="在安卓手机上安装Charles证书"></a>在安卓手机上安装Charles证书</h1><p>日常开发中，总有遇到要查看网络请求的时候，浏览器中打开调试器就能看到，手机端就抓瞎了。Charles就正好能帮住我们解决这样的难题。</p><p>然鹅，使用几次之后你就会发现，抓http请求的时候Charles是一抓一个准，而抓https的时候你却看到的都是红叉叉。因为使用Charles截取https通信需要安装Charles的证书，没有安装证书，自然看到的都是叉叉咯。</p><p>说到安装证书，安卓爸爸安装Charles的证书总是会遇到奇奇怪怪的问题。我也是找了八百个帖子试了一百种办法好不容易才装上，于是就有了这篇文章，权当记录以备忘，同时也希望能帮到同样卡在装证书上的同学。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Charles是mac中常用的抓包工具，主要是用来抓网络封包然后进行分析。</p><p><strong>官网</strong>：<a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">https://www.charlesproxy.com/</a></p><p>正版收费，免费试用30天。</p><h2 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h2><p>根据我<strong>八百个帖子</strong>的经验，安装证书有两种<strong>比较靠谱</strong>的办法：</p><ol><li>根据官方的推荐，在线下载自动安装，轻松愉快（ BUT，我没安上… ）</li><li>本地导出证书，传到手机上安装</li></ol><p>我的情况是第一种方法没成功，下载到了文件但是无法安装（ 黑人问号？？？）</p><p><img src="/images/charles/4.jpeg" alt="安装失败"></p><p>说一下第一种方法的步骤：</p><ul><li><p>打开Charles，眼睛瞄到顶上菜单栏的 “ Help ” ，点开。</p></li><li><p>找到 “ SSL Proxying ” -&gt; “ Install Charles Root Certificate on a Mobile Device or Remote Browser ”，按下去。</p><p><img src="/images/charles/1.png" alt="方法一步骤"></p></li><li><p>然后跟着提示操作。手机代理到本机ip的 <code>8888</code> 端口，在手机浏览器上打开<code>chls.pro/ssl</code>，就会自动下载并安装证书（ 如果没有自动安装，可以自己去下载管理里面找出来手动安装它 ）。</p><p><img src="/images/charles/3.png" alt="charles提示"></p><p>不知道本机ip可以使用 <code>ifconfig</code> 命令查找</p></li></ul><p>然鹅，这种方法根本不适合我。无奈只能寄希望于第二种：</p><ul><li><p>打开Charles，还是瞄到上面 “ Help “ ，点开。</p></li><li><p>找到 “ SSL Proxying “ -&gt; “ Save Charles Root Certificate… “，按下去。</p><p><img src="/images/charles/2.png" alt=""></p><p>会出现提示保存的界面，可以保存成两种格式，<code>.pem</code> 和 <code>.cer</code> ，我存了 <code>.cer</code> 。</p><p><img src="/images/charles/6.png" alt=""></p><p>就是这货，把这个文件传到手机上。</p><p>我是用微信传的，传到了之后在微信里点开，结果提示还是无法安装，这就神奇了不是？</p><p>别急，咱们换种办法，进入”设置” -&gt; “更多设置” -&gt; “系统安全” -&gt; “从SD卡安装证书”，然后找到证书文件，打开（ 可能不同的手机路径略有不同，莫慌，仔细找找总会找到的。我的是小米 ）。</p><p><img src="/images/charles/8.jpeg" alt=""></p><p>这里有一点要注意，安装证书要输入锁屏密码，如果没有，就去设置一个。</p><p><img src="/images/charles/9.jpeg" alt=""></p><p>历经千辛万苦，终于安装成功了。</p><p>​</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单的总结一下，我在安装证书时的跌宕起伏：</p><ol><li>通过在线安装的方法不成功，提示无法读取证书文件。</li><li>进入下载目录找到下载的证书文件手动安装也不成功，同样提示无法读取。</li><li>转到系统安全设置中，从SD卡安装同样也不成功。至此官网方法正式宣告失败。</li><li>通过导出证书到本地，传到手机上，在微信点开安装，失败，提示无法读取证书文件。</li><li>进入文件管理，手动点开证书文件，提示无法读取证书。</li><li>使用从SD卡安装功能，成功进入证书安装界面。安装证书需要设置锁屏密码，设置锁屏密码。</li><li>安装成功。</li></ol><p>虽然走了很多弯路，但总算是安上了，期间查了不少资料，也看了不少博客，发现遇到大家遇到的问题都不尽相同，所以决定写一篇文章总结一下自己的心得。万一正好帮上谁了呢？</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.jianshu.com/p/923eca294579" target="_blank" rel="noopener">如何用charles进行https抓包</a></p><p><a href="http://blog.devtang.com/2015/11/14/charles-introduction/" target="_blank" rel="noopener">Charles 从入门到精通</a></p><p><a href="https://malcolmyu.github.io/2017/02/26/Dive-into-Charles-HTTPS-Proxying/" target="_blank" rel="noopener">细说 Charles 配置 HTTPS 代理的乱码问题</a></p>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/09/26/install-charles-certificate-android/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sublime Text操作规范即基本操作</title>
      <link>https://cosmeapp.github.io/2017/09/26/sublime-text/</link>
      <guid>https://cosmeapp.github.io/2017/09/26/sublime-text/</guid>
      <pubDate>Tue, 26 Sep 2017 12:57:09 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;p&gt;本文对&lt;code&gt;Sublime Text&lt;/code&gt;基本配置，常用插件，基本快捷键做的基本整理。&lt;/p&gt;&lt;h2 id=&quot;自定义配置&quot;&gt;&lt;a href=&quot;#自定义配置&quot; class=&quot;headerlink&quot;
          
        
      
      </description>
      
      <content:encoded><![CDATA[<p>本文对<code>Sublime Text</code>基本配置，常用插件，基本快捷键做的基本整理。</p><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p>在原配置中添加：</p><pre><code>&quot;font_face&quot;: &quot;source code pro&quot;, //字体设置&quot;font_size&quot;: 15, //字体大小&quot;translate_tabs_to_spaces&quot;: true, //转换tab为空格(必要)&quot;trim_trailing_white_space_on_save&quot;: true //保存时候删除每行末尾空格(必要)</code></pre><h2 id="自定义快捷键"><a href="#自定义快捷键" class="headerlink" title="自定义快捷键"></a>自定义快捷键</h2><pre><code>[    { &quot;keys&quot;: [&quot;super+shift+a&quot;], &quot;command&quot;: &quot;reindent&quot; },//格式化，super为command键    { &quot;keys&quot;: [&quot;super+shift+r&quot;], &quot;command&quot;: &quot;goto_symbol_in_project&quot; }//全局搜索类/方法]</code></pre><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul><li>使用Package Control组件安装</li><li><p>先在hosts中添加</p><p>#sublime service<br>50.116.34.243 sublime.wbond.net</p></li></ul><h3 id="安装Package-Control组件"><a href="#安装Package-Control组件" class="headerlink" title="安装Package Control组件"></a>安装Package Control组件</h3><ul><li>按Ctrl+`调出console</li><li>粘贴以下代码到底部命令行并回车：</li><li><p>sublime text 3:</p><p>import urllib.request,os; pf = ‘Package Control.sublime-package’; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), ‘wb’).write(urllib.request.urlopen( ‘<a href="http://sublime.wbond.net/&#39;" target="_blank" rel="noopener">http://sublime.wbond.net/&#39;</a> + pf.replace(‘ ‘,’%20’)).read())</p></li><li><p>sublime text 2:</p><p>import urllib2,os; pf=’Package Control.sublime-package’; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), ‘wb’ ).write( urllib2.urlopen( ‘<a href="http://sublime.wbond.net/&#39;" target="_blank" rel="noopener">http://sublime.wbond.net/&#39;</a> +pf.replace( ‘ ‘,’%20’ )).read()); print( ‘Please restart Sublime Text to finish installation’)</p></li><li><p>重启Sublime Text</p></li><li>如果在Perferences-&gt;package settings中看到package control这一项，则安装成功。</li></ul><h3 id="用Package-Control安装插件的方法"><a href="#用Package-Control安装插件的方法" class="headerlink" title="用Package Control安装插件的方法"></a>用Package Control安装插件的方法</h3><ul><li>按下Ctrl+Shift+P调出命令面板</li><li>输入install 调出 Install Package 选项并回车，然后在列表中选中要安装的插件。</li></ul><h4 id="必要插件"><a href="#必要插件" class="headerlink" title="必要插件"></a>必要插件</h4><ul><li><a href="https://github.com/titoBouzout/SideBarEnhancements/tree/st3" target="_blank" rel="noopener">SublimeLinter</a></li><li><a href="https://github.com/kemayo/sublime-text-git" target="_blank" rel="noopener">Git</a></li><li><a href="https://github.com/spadgos/sublime-jsdocs" target="_blank" rel="noopener">DocBlockr</a></li><li><a href="https://github.com/wbond/sublime_alignment" target="_blank" rel="noopener">Alignment</a></li><li><a href="https://github.com/facelessuser/BracketHighlighter" target="_blank" rel="noopener">Bracket​Highlight</a></li><li>ConvertToUTF8</li><li><a href="http://emmet.io/" target="_blank" rel="noopener">Emmet</a></li></ul><h2 id="基本快捷键-我会用到的"><a href="#基本快捷键-我会用到的" class="headerlink" title="基本快捷键(我会用到的)"></a>基本快捷键(我会用到的)</h2><h3 id="打开-前往"><a href="#打开-前往" class="headerlink" title="打开/前往"></a>打开/前往</h3><table><thead><tr><th>快捷键</th><th>操作</th></tr></thead><tbody><tr><td><strong>command + P</strong></td><td>前往文件(输入<code>:</code>则等同于<code>control + G</code>跳到行)</td></tr><tr><td><strong>command + control + P</strong></td><td>前往项目</td></tr><tr><td><strong>command + R</strong></td><td>前往method</td></tr><tr><td><strong>command + shift + R</strong></td><td>前往全局method(也许需添加之前的配置)</td></tr><tr><td>command + shift + P</td><td>命令提示</td></tr><tr><td>control + G</td><td>前往行</td></tr><tr><td><strong>command + K + B</strong></td><td>开关侧栏</td></tr><tr><td>control + `</td><td>python控制台</td></tr></tbody></table><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><table><thead><tr><th>快捷键</th><th>操作</th></tr></thead><tbody><tr><td><strong>command + D</strong></td><td>选择词 (重复按下时多重选择相同的词进行多重编辑)</td></tr><tr><td>command + KK</td><td>从光标处删除至行尾</td></tr><tr><td><strong>command + shift + D</strong></td><td>复制(多)行</td></tr><tr><td>command + J</td><td>合并(多)行</td></tr><tr><td>command + KU</td><td>改为大写</td></tr><tr><td>command + KL</td><td>改为小写</td></tr><tr><td><strong>command + /</strong></td><td>注释</td></tr><tr><td><strong>command + option + /</strong></td><td>块注释</td></tr><tr><td>command + Z</td><td>撤销</td></tr><tr><td>command + Y</td><td>恢复或重复</td></tr><tr><td>control + M</td><td>跳转至对应的括号</td></tr><tr><td>command + U</td><td>软撤销（可撤M销光标移动）</td></tr><tr><td>command + shift + U</td><td>软重做（可重做光标移动）</td></tr></tbody></table><h3 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h3><table><thead><tr><th>快捷键</th><th>操作</th></tr></thead><tbody><tr><td>command + option + X</td><td>X屏</td></tr><tr><td>control + [1,2,3,4]</td><td>焦点移动至相应组</td></tr><tr><td>control + shift + [1,2,3,4]</td><td>将当前文件移动至相应组</td></tr><tr><td>command + [1,2,3]</td><td>选择相应标签页</td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/09/26/sublime-text/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PHP 系列：代码规范之 Code Sniffer</title>
      <link>https://cosmeapp.github.io/2017/09/26/php-mess-detector/</link>
      <guid>https://cosmeapp.github.io/2017/09/26/php-mess-detector/</guid>
      <pubDate>Tue, 26 Sep 2017 08:42:25 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;p&gt;之前写了一篇 &lt;a href=&quot;https://blog.stephencode.com/p/php_code_sniffer.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《PHP 系列：代码规范之 Code Sniffer》&lt;/a&gt;，介绍了
          
        
      
      </description>
      
      <content:encoded><![CDATA[<p>之前写了一篇 <a href="https://blog.stephencode.com/p/php_code_sniffer.html" target="_blank" rel="noopener">《PHP 系列：代码规范之 Code Sniffer》</a>，介绍了 phpcs 和 phpcbf 这两个检测脚本，今天让我们欢迎新成员 phpmd ~</p><blockquote><p>PHPMD is a spin-off project of PHP Depend and aims to be a PHP equivalent of the well known Java tool PMD. PHPMD can be seen as an user friendly and easy to configure frontend for the raw metrics measured by PHP Depend.</p></blockquote><p><img src="https://cdn.stephencode.com/article/php/phpmd.png" alt="phpmd"></p><p>它的作用主要是分析我们写的代码，然后指出其中潜在的问题。举个栗子，大家都知道 IDE 中，如果一个变量声明了但未使用过，IDE 会报出警告。</p><p>其实使用的也是这类静态检测脚本，对于编写良好的代码，这些工具能较好的帮到你。自从弃了 PHPStorm 后，一直在 Sublime Text 上敲，既然默认不集成这些，那就自己手动集成咯~</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>还是使用 composer，使用全局安装方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer global require &quot;phpmd/phpmd&quot;</span><br></pre></td></tr></table></figure><p>图方便加个软连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /Users/stephen/.composer/vendor/phpmd/phpmd/src/bin/phpmd /usr/bin/phpmd</span><br></pre></td></tr></table></figure><h2 id="命令行使用"><a href="#命令行使用" class="headerlink" title="命令行使用"></a>命令行使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ phpmd /path/to/ text unusedcode</span><br><span class="line"></span><br><span class="line">/path/to/test.php:25    Avoid unused local variables such as &apos;$a&apos;.</span><br><span class="line">/path/to/test.php:26    Avoid unused local variables such as &apos;$b&apos;.</span><br></pre></td></tr></table></figure><p>这里使用了 <code>text</code> 格式的输出，默认是 <code>xml</code>，像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;pmd version=&quot;@project.version@&quot; timestamp=&quot;2017-09-22T01:33:16+00:00&quot;&gt;</span><br><span class="line">  &lt;file name=&quot;/path/to/test.php&quot;&gt;</span><br><span class="line">    &lt;violation beginline=&quot;25&quot; endline=&quot;25&quot; rule=&quot;UnusedLocalVariable&quot; ruleset=&quot;Unused Code Rules&quot; externalInfoUrl=&quot;http://phpmd.org/rules/unusedcode.html#unusedlocalvariable&quot; priority=&quot;3&quot;&gt;</span><br><span class="line">      Avoid unused local variables such as &apos;$a&apos;.</span><br><span class="line">    &lt;/violation&gt;</span><br><span class="line">    &lt;violation beginline=&quot;26&quot; endline=&quot;26&quot; rule=&quot;UnusedLocalVariable&quot; ruleset=&quot;Unused Code Rules&quot; externalInfoUrl=&quot;http://phpmd.org/rules/unusedcode.html#unusedlocalvariable&quot; priority=&quot;3&quot;&gt;</span><br><span class="line">      Avoid unused local variables such as &apos;$b&apos;.</span><br><span class="line">    &lt;/violation&gt;</span><br><span class="line">  &lt;/file&gt;</span><br><span class="line">&lt;/pmd&gt;</span><br></pre></td></tr></table></figure><p>然后你会发现使用 <code>text</code> 格式会简明扼要很多。。。</p><p>上面这个例子只使用了一个规则 <code>unusedcode</code>，官方提供了六个规则，能满足绝大部分的需求： <code>cleancode, codesize, controversial, design, naming, unusedcode</code></p><p>具体这些规则检测的是哪些方面，去看下官方文档是最好的，<a href="https://phpmd.org/rules/index.html" target="_blank" rel="noopener">传送门</a></p><h2 id="在-Sublime-中集成"><a href="#在-Sublime-中集成" class="headerlink" title="在 Sublime 中集成"></a>在 Sublime 中集成</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>前提 <code>Package Control</code> 要安装好，这个你肯定没问题的（莫名的自信，逃）</p><p>安装 <code>phpcs</code> 这个插件，然后打开这个插件的 <code>Settings - User</code> 和 <code>Settings - Default</code>，将后者的内容全部复制到前者。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>将以下配置项替换掉：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"phpmd_run"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"phpmd_command_on_save"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"phpmd_executable_path"</span>: <span class="string">"phpmd"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"phpmd_additional_args"</span>: &#123;</span><br><span class="line">        <span class="attr">"codesize,controversial,design,naming,unusedcode"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这边有几个注意点：</p><ol><li><code>&quot;codesize,controversial,design,naming,unusedcode&quot;</code> 这里的逗号后面不能加空格</li><li><code>cleancode</code> 没有加上是因为一旦你使用了类静态方法调用，这个规则就会提醒你不要用。。。比如你在用 Laravel，然后你就炸了，虽然多用静态方法会增加不少运行时内存，但 Laravel 的静态方法是伪静态，都会实例化，所以先暂时舍弃这个规则了，之后自己写一个规则把其他好用的检测方法包含进来就好。</li></ol><blockquote><p>在配置的过程中建议全程开着 Sublime 的控制台（<code>Ctrl + ~</code> 唤起）。</p></blockquote><p>比如我将 <code>&quot;codesize,controversial&quot;</code> 改成 <code>&quot;codesize, controversial&quot;</code>，加了个逗号，然后再使用的时候，控制台里会报出错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Phpcs] Cannot find specified rule-set &quot; controversial&quot;.</span><br></pre></td></tr></table></figure><hr><p>本文参考链接：</p><ul><li><a href="https://phpmd.org" target="_blank" rel="noopener">Mess Detector 官方网站</a></li></ul>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/09/26/php-mess-detector/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Git flow 分支规范管理流程</title>
      <link>https://cosmeapp.github.io/2017/09/20/git-flow/</link>
      <guid>https://cosmeapp.github.io/2017/09/20/git-flow/</guid>
      <pubDate>Wed, 20 Sep 2017 16:45:09 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;p&gt;本文主要通过git flow管理分支。&lt;/p&gt;&lt;h2 id=&quot;git-flow-模型&quot;&gt;&lt;a href=&quot;#git-flow-模型&quot; class=&quot;headerlink&quot; title=&quot;git flow 模型&quot;&gt;&lt;/a&gt;git flow 模型&lt;/h2&gt;&lt;p&gt;&lt;img
          
        
      
      </description>
      
      <content:encoded><![CDATA[<p>本文主要通过git flow管理分支。</p><h2 id="git-flow-模型"><a href="#git-flow-模型" class="headerlink" title="git flow 模型"></a>git flow 模型</h2><p><img src="http://static.cosmeapp.com/FqoiVHHk3A5XeVNnJrj3VuMybjSW?imageView2/2/w/611/h/815" alt="image"></p><blockquote><p>图片来自<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">nvie的博文</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>brew install git-flow</code></pre><h2 id="git-flow-辅助命令"><a href="#git-flow-辅助命令" class="headerlink" title="git flow 辅助命令"></a>git flow 辅助命令</h2><p>git flow 命令使用帮助:</p><pre><code>usage: git flow &lt;subcommand&gt;Available subcommands are:   init      Initialize a new git repo with support for the branching model.   feature   Manage your feature branches.   release   Manage your release branches.   hotfix    Manage your hotfix branches.   support   Manage your support branches.   version   Shows version information.</code></pre><p>命令Samples:</p><pre><code>1. 使用 git feature start meibox 开启meibox功能的开发.2. 使用 git feature publish meibox 将meibox分支提交到远端3. 使用 git feature finish meibox 完成meibox分支并将功能合并到dev分支功能开发完成并完成合并后删除远程分支git push origin --delete feature-test</code></pre><h2 id="分支规范"><a href="#分支规范" class="headerlink" title="分支规范"></a>分支规范</h2><pre><code>master    ~ 主分支 (线上部署分支)dev       ~ 开发分支feature-  ~ 特性分支hotfix-   ~ 修正生产代码中的缺陷</code></pre><p>为了更好的使用git flow管理, 已将相关项目的<code>git submodule</code> 替换为 <code>git subtree</code></p><h3 id="分支说明"><a href="#分支说明" class="headerlink" title="分支说明"></a>分支说明</h3><p><code>feature 分支:</code></p><p>统一使用简化的git flow 流程来进行项目, 采用统一的分支前缀, 并在管理流程中增加代码Review环节:</p><pre><code>在一个新特性开始时 使用git flow feature start 开启新的特性分支(保持feauter-的相同前缀)功能完成开发后, 使用coding的[合并请求]功能发起代码评审.</code></pre><p><img src="http://static.cosmeapp.com/FpdkhVkrh04GG8Ra_JJoTCRhyRZH?imageView2/2/w/400" alt="code-review"></p><pre><code>功能模块代码, 至少经过两个人的code review 才允许被合并.(并且每次提交之前养成自己主动review的习惯)在相应feature-完成代码review之后, 作者需要对相关功能进行改进完善(评审人提出异议的情况, 作者确认问题是否真实存在)评审完毕后feature特性开发完成, 合并到dev分支, 并删除对应的feature-分支.</code></pre><blockquote><p>注: 同一个feature在开发完成合并之后需要删除, 不允许重复使用, 新的功能特性新建新的功能分支开进行开发</p></blockquote><p><code>hotfix 分支:</code></p><pre><code>主要用于修复线上bug, 从master分支切出hotfix分支, 修复问题后合并到master 和 devSample: git flow hotfix start bugtest, 重要bug修复后需要发起评审➜  projectApi git:(dev) git flow hotfix start testSwitched to a new branch &apos;hotfix-test&apos;Summary of actions:- A new branch &apos;hotfix-test&apos; was created, based on &apos;master&apos;- You are now on branch &apos;hotfix-test&apos;Follow-up actions:- Bump the version number now!- Start committing your hot fixes- When done, run:     git flow hotfix finish &apos;test&apos;</code></pre><p><code>dev 分支:</code></p><pre><code>开发分支, 在feature完成 或 bugfix 之后相关代码被合并到dev.develop分支是保存当前最新开发成果的分支。通常这个分支上的代码也是可进行每日夜间发布的代码（Nightly build）。</code></pre><p><code>master 分支:</code></p><pre><code>线上发布分支</code></pre><p>线上测试环境:</p><pre><code>在保障dev 分支的代码质量后, 将dev作为线上测试环境的部署分支, 为了简化分支管理流程,在美妆git管理流程中, 暂时去掉了release分支的预发布管理.</code></pre><blockquote><p>注: release 分支说明:<br>release分支是为发布新的产品版本而设计的。在这个分支上的代码允许做小的缺陷修正、准备发布版本所需的各项说明信息<br>（版本号、发布时间、编译时间等等）。通过在release分支上进行这些工作可以让develop分支空闲出来以接受新的feature分支上<br>的代码提交，进入新的软件开发迭代周期。</p></blockquote><h2 id="测试环境代码发布规范"><a href="#测试环境代码发布规范" class="headerlink" title="测试环境代码发布规范"></a>测试环境代码发布规范</h2><p>目前主要针对projectApi，projectShop项目</p><p>描述： 线上部署的projectApi测试环境统一使用名为在test 的分支进行发布。</p><p>发布流程</p><p>一、 当A同学开发完一个特性feature-aaa后。(current branch: feature-a)</p><p>Sample：</p><pre><code>git checkout testgit pull origin testgit merge feature-a (合并远程feature修改使用 git pull origin feature-a)git push origin test</code></pre><p>二、 当B同学开发完另一个特性feature-b后。同上。</p><p>注：此时test分支同时包含A同学B同学修改特性的代码。其他分支禁止合并test分支。</p><p>A同学提交到test测试通过后，将feature-a合并到dev, B同学测试通过后将特性feature-b合并到dev。</p><p>因为分支上同时包含多个同学的特性代码，严禁直接将test合并到其他分支（包含别人修改的未经测试的特性代码）。</p><p>解决问题：</p><p>目前线上测试环境部署在dev分支，A和B同时需要测试时，会临时将测试部署修改成A或者B对应的特性分支，这样线上测试环境只有单一特性，</p><p>无法满足多人测试。同时未经线上测试的feature合并到dev分支不安全。</p><p>缺点：</p><p>a. 常规冲突可通过合并解决。但A同学B同学在同一个功能模块上做不同实验性代码修改时会产生问题，比如同一逻辑的不同实现。</p><p>b. 因为此时线上测试环境包含多个特性修改，A开发完成，测试feature-a通过，将feature-a合并到dev，最终阶段性开发完成后，将dev合并到master。</p><p>此时可能feature-a已经合到dev =&gt; master， feature-b还处于测试阶段，那么由于a特性的线上测试受到了b特性的影响，测试环境与最终的部署线上存异，从而因不一致性导致未发现的问题产生。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.ituring.com.cn/article/56870" target="_blank" rel="noopener">基于git的源代码管理模型——git flow</a></li><li><a href="https://segmentfault.com/a/1190000003969060" target="_blank" rel="noopener">用 Git Subtree 在多个 Git 项目间双向同步子项目，附简明使用手册</a></li></ul>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/09/20/git-flow/#disqus_thread</comments>
    </item>
    
    <item>
      <title>git基本操作</title>
      <link>https://cosmeapp.github.io/2017/09/20/git-basic/</link>
      <guid>https://cosmeapp.github.io/2017/09/20/git-basic/</guid>
      <pubDate>Wed, 20 Sep 2017 16:45:09 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;p&gt;本文最早由Limitsy编写，&lt;a href=&quot;https://huixisheng.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;悔惜晟&lt;/a&gt;做了补充。&lt;/p&gt;&lt;h2 id=&quot;克隆&quot;&gt;&lt;a href=&quot;#克隆&quot;
          
        
      
      </description>
      
      <content:encoded><![CDATA[<p>本文最早由Limitsy编写，<a href="https://huixisheng.github.io" target="_blank" rel="noopener">悔惜晟</a>做了补充。</p><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git://host.xz[:port]/path/to/repo.git</span><br></pre></td></tr></table></figure><p>完整命令，<a href="https://git-scm.com/docs/git-clone" target="_blank" rel="noopener">具体参数可以参考</a>, 或者<code>git clone --help</code><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone [--template=&lt;template_directory&gt;]</span><br><span class="line">      [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]</span><br><span class="line">      [-o &lt;name&gt;] [-b &lt;name&gt;] [-u &lt;upload-pack&gt;] [--reference &lt;repository&gt;]</span><br><span class="line">      [--dissociate] [--separate-git-dir &lt;git dir&gt;]</span><br><span class="line">      [--depth &lt;depth&gt;] [--[no-]single-branch] [--no-tags]</span><br><span class="line">      [--recurse-submodules] [--[no-]shallow-submodules]</span><br><span class="line">      [--jobs &lt;n&gt;] [--] &lt;repository&gt; [&lt;directory&gt;]</span><br></pre></td></tr></table></figure><p></p><h2 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h2><ol><li>git add .</li><li>git commit</li><li>git pull origin $(current_branch)’</li><li>git push origin $(current_branch)’（没冲突 OR 先解决冲突 再重复上述操作）</li></ol><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><ol><li>更新操作完成对分支的修改</li><li>git pull origin master(合并主分支 防止有冲突)</li><li>git push origin $(current_branch)’（没冲突 OR 先解决冲突 再重复上述操作）</li><li>再在线上完成分支合并</li></ol><h2 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h2><ul><li>git checkout -b {branch} (新建分支)</li><li>git checkout {branch} (切换到现有分支)</li><li>git checkout –track origin/{branch} (切换到远程分支并同步到本地，之前需要操作 git pull)</li></ul><h2 id="Tag操作"><a href="#Tag操作" class="headerlink" title="Tag操作"></a>Tag操作</h2><ul><li>git tag #查看标签列表</li><li>git tag v1.2.1 #添加标签v.1.2.1</li><li>git tag -a v1.2.1 b477cbc #为之前提交的commit添加标签</li><li>git show v1.2.1 #查看标签 v.1.2.1 的信息</li><li>git push –tags # 提交时带上标签信息</li><li>git tag -d 2.5.1001 #删除本地标签</li><li>git push origin :refs/tags/1.2.0 #删除远程标签</li></ul><h2 id="coding-服务切换"><a href="#coding-服务切换" class="headerlink" title="coding 服务切换"></a>coding 服务切换</h2><blockquote><p>Coding.net Tips : [GIT access is disabled on coding.net domain, please use git.coding.net instead. See detail: <a href="https://coding.net/u/coding/pp/54510]" target="_blank" rel="noopener">https://coding.net/u/coding/pp/54510]</a><br>fatal: Could not read from remote repository.</p></blockquote><pre><code>git remote set-url origin git://host.xz[:port]/path/to/repo.git</code></pre><h2 id="使用rebase-保持分支书整洁"><a href="#使用rebase-保持分支书整洁" class="headerlink" title="使用rebase 保持分支书整洁"></a>使用rebase 保持分支书整洁</h2><p>利用rebase修改历史提交记录，可以看<a href="https://huixisheng.github.io/git-rebase/" target="_blank" rel="noopener">这里</a></p><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><pre><code>git pull --rebase origin master</code></pre><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><pre><code>git checkout devgit reabse mastergit checkout mastergit merge dev</code></pre><ul><li><a href="http://www.html-js.com/article/Week-end-column-Git-crash-course-git-rebase" target="_blank" rel="noopener">Git速成班: git rebase</a></li></ul><h2 id="submodule-替换为-subtree"><a href="#submodule-替换为-subtree" class="headerlink" title="submodule 替换为 subtree"></a>submodule 替换为 subtree</h2><pre><code>git rm —cached app/Libraryrm -rf app/Libraryvi .git/config  删除submodule 配置rm .gitmodules//添加subtreegit remote add Library git://host.xz[:port]/path/to/repo.gitgit subtree add —prefix=app/Library Library devgit checkout -b devgit pull origin dev   合并主分支代码</code></pre><h2 id="项目一键初始化"><a href="#项目一键初始化" class="headerlink" title="项目一键初始化"></a>项目一键初始化</h2><pre><code>git clone git://host.xz[:port]/path/to/repo.gitcomposer updatemkdir storagechmod -R 777 storage/mkdir -p bootstrap/cache/chmod -R 777 bootstrap/cache/php artisan route:cachephp artisan config:cache</code></pre><p><strong>ps: todo 修改为一键脚本</strong></p><h2 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h2><ul><li><a href="https://coding.net/u/rainy/pp/30783" target="_blank" rel="noopener">coding.net Permission denied (publickey)</a></li><li><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="noopener">如何创建 ssh key</a></li><li><a href="http://huixisheng.github.io/git/" target="_blank" rel="noopener">git命令简单介绍</a></li></ul>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/09/20/git-basic/#disqus_thread</comments>
    </item>
    
    <item>
      <title>变量的解构赋值和展开运算符</title>
      <link>https://cosmeapp.github.io/2017/09/20/es6-destructuring-and-spread-operator/</link>
      <guid>https://cosmeapp.github.io/2017/09/20/es6-destructuring-and-spread-operator/</guid>
      <pubDate>Wed, 20 Sep 2017 14:13:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;本文对&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;变量的解构赋值(destructing)&lt;/a&gt;和&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;展开运算符(spread operator …)&lt;/a&gt;做个简单的介绍。&lt;/p&gt;&lt;p&gt;本文首发在&lt;a href=&quot;https://huixisheng.github.io/es6-destructuring-and-spread-operator/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前端开发说&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>本文对<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">变量的解构赋值(destructing)</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator" target="_blank" rel="noopener">展开运算符(spread operator …)</a>做个简单的介绍。</p><p>本文首发在<a href="https://huixisheng.github.io/es6-destructuring-and-spread-operator/" target="_blank" rel="noopener">前端开发说</a></p><a id="more"></a><h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><p>以下例子通过<code>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3216.0 Safari/537.36</code>测试。</p><h3 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let [a, b] = [1, 2];</span><br><span class="line">console.log(a); // 1</span><br><span class="line">console.log(b); // 2</span><br><span class="line"></span><br><span class="line">let [a, b, ...rest] = [1, 2, 3, 4, 5];</span><br><span class="line">console.log(a); // 1</span><br><span class="line">console.log(b); // 2</span><br><span class="line">console.log(rest); // [3, 4, 5]</span><br><span class="line"></span><br><span class="line">// 不完全解构</span><br><span class="line">let [a, b] = [1, 2, 3]</span><br><span class="line">console.log(a); // 1</span><br><span class="line">console.log(b); // 2</span><br><span class="line"></span><br><span class="line">// 设置默认值</span><br><span class="line">let [a = 1] = []</span><br><span class="line">console.log(a); // 1</span><br></pre></td></tr></table></figure><h3 id="对象赋值"><a href="#对象赋值" class="headerlink" title="对象赋值"></a>对象赋值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 用于提取数据</span><br><span class="line">const &#123;a, b, ...rest&#125; = &#123;a:1, b:2, c:3, d:4&#125;</span><br><span class="line">console.log(a); // 1</span><br><span class="line">console.log(b); // 2</span><br><span class="line">console.log(rest); // &#123;c: 3, d: 4&#125;</span><br></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 默认值设置</span><br><span class="line">function fun([a, b = 3]) &#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br><span class="line">fun([1]) // 4</span><br><span class="line"></span><br><span class="line">[[1, 2], [3, 4]].map(([a, b]) =&gt; a + b) // [3, 7]</span><br></pre></td></tr></table></figure><h2 id="对象展开运算符"><a href="#对象展开运算符" class="headerlink" title="对象展开运算符"></a>对象展开运算符</h2><p>扩展运算符（spread operator …）将一个数组、类数组、字符串转为用逗号分隔的序列。</p><p>最早是在<a href="https://vuex.vuejs.org/zh-cn/state.html" target="_blank" rel="noopener">Vuex</a>文档看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  localComputed () &#123; /* ... */ &#125;,</span><br><span class="line">  // 使用对象展开运算符将此对象混入到外部对象中</span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 来自: https://vuex.vuejs.org/zh-cn/state.html</span><br></pre></td></tr></table></figure><p>得知是<a href="https://github.com/tc39/proposal-object-rest-spread" target="_blank" rel="noopener">对象展开运算符</a>。查阅资料发现属于ES6变量的解构赋值的内容。说来也惭愧<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">《ES6 标准入门》</a>第1版，第2版都看过，当初看的不深入，很多知识点都有漏洞。而今天在封装<code>Vue组件</code>的时候，如下代码看的甚是变扭，ES6模块和CommonJS规范糅杂在一起。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import components from &apos;./components&apos;;</span><br><span class="line"></span><br><span class="line">const install = function (Vue) &#123;</span><br><span class="line">  Object.keys(components).forEach((key) =&gt; &#123;</span><br><span class="line">    Vue.component(key, components[key]);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">if (typeof window !== &apos;undefined&apos; &amp;&amp; window.Vue) &#123;</span><br><span class="line">  install(window.Vue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = Object.assign(components, &#123; install &#125;);  // eslint-disable-line no-undef</span><br></pre></td></tr></table></figure><p>于是做了如下调整</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  install,</span><br><span class="line">  ...packages,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Vuex的文档中有介绍对象展开运算符（现处于 ECMASCript 提案 stage-3 阶段）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">The TC39 categorizes proposals into the following stages:</span><br><span class="line"></span><br><span class="line">Stage 0 - Strawman: just an idea, possible Babel plugin.</span><br><span class="line">Stage 1 - Proposal: this is worth working on.</span><br><span class="line">Stage 2 - Draft: initial spec.</span><br><span class="line">Stage 3 - Candidate: complete spec and initial browser implementations.</span><br><span class="line">Stage 4 - Finished: will be added to the next yearly release.</span><br><span class="line"></span><br><span class="line">摘自文档 https://babeljs.io/docs/plugins/</span><br></pre></td></tr></table></figure><p>大致翻译如下:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Stage 0 - Strawman（展示阶段）</span><br><span class="line">Stage 1 - Proposal（征求意见阶段）</span><br><span class="line">Stage 2 - Draft（草案阶段）</span><br><span class="line">Stage 3 - Candidate（候选人阶段）</span><br><span class="line">Stage 4 - Finished（定案阶段）</span><br><span class="line">进入 2 阶段，基本上都已经确定要发布了。</span><br><span class="line"></span><br><span class="line">在 2015 年进入 stage4 的叫做 es2015</span><br><span class="line">在 2016 年进入 stage4 的叫做 es2016</span><br><span class="line">以此类推</span><br><span class="line"></span><br><span class="line">作者：Yugo</span><br><span class="line">链接：http://www.jianshu.com/p/41d3f7768095</span><br></pre></td></tr></table></figure><p></p><h3 id="对象合并"><a href="#对象合并" class="headerlink" title="对象合并"></a>对象合并</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const a = [1, 2];</span><br><span class="line">const b = [3, 4];</span><br><span class="line">console.log(a.concat(b));</span><br><span class="line">const c = [...a, ...b]; // [1, 2, 3, 4]</span><br><span class="line"></span><br><span class="line">const a1 = &#123; a: 1&#125;;</span><br><span class="line">const b2 = &#123; b: 2&#125;;</span><br><span class="line">console.log(Object.assign(a1, b2));</span><br><span class="line">console.log(&#123; ...a1, ...b2&#125;); // &#123;a: 1, b: 2&#125;</span><br></pre></td></tr></table></figure><h3 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function fun(...args) &#123;</span><br><span class="line">    console.log(args) //  [1, 2]</span><br><span class="line">&#125;</span><br><span class="line">fun(1, 2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function func2(a, b, c) &#123;</span><br><span class="line">    console.log(a, b, c) // &#123;a: 1&#125; 3 &quot;cc&quot;</span><br><span class="line">&#125;</span><br><span class="line">let rest = [3];</span><br><span class="line">func2(&#123;a: 1&#125;, ...rest, &apos;cc&apos;);</span><br></pre></td></tr></table></figure><h3 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h3><ul><li><a href="http://www.zcfy.cc/article/6-great-uses-of-the-spread-operator-3268.html" target="_blank" rel="noopener">展开运算符的 6 种绝妙用法</a></li><li><a href="http://blog.csdn.net/qq_30100043/article/details/53424750" target="_blank" rel="noopener">http://blog.csdn.net/qq_30100043/article/details/53424750</a></li><li><a href="https://blog.fundebug.com/2017/07/19/master_object_spread_operator/" target="_blank" rel="noopener">ES6之Spread Operater拷贝对象</a></li><li><a href="http://blog.csdn.net/qq_30100043/article/details/53391308" target="_blank" rel="noopener">es6 扩展运算符 三个点（…）</a></li><li><a href="https://sagittarius-rev.gitbooks.io/understanding-ecmascript-6-zh-ver/chapter_4.html" target="_blank" rel="noopener">第四章 扩展的对象功能</a></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>知识点的理解结合具体的项目代码，能快速掌握。不清楚不懂的查漏补缺，just-do-it，对!就是立刻做，这是你知识体系的短板，深挖进去发现会收获很多。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://es6.ruanyifeng.com/#docs/destructuring" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/destructuring</a></li><li><a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md" target="_blank" rel="noopener">https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md</a></li><li><a href="https://excaliburhan.com/post/babel-preset-and-plugins.html" target="_blank" rel="noopener">https://excaliburhan.com/post/babel-preset-and-plugins.html</a></li><li><a href="https://segmentfault.com/a/1190000010468759" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010468759</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment</a></li></ul>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/09/20/es6-destructuring-and-spread-operator/#disqus_thread</comments>
    </item>
    
    <item>
      <title>资源导航整理</title>
      <link>https://cosmeapp.github.io/2017/09/19/source-nav/</link>
      <guid>https://cosmeapp.github.io/2017/09/19/source-nav/</guid>
      <pubDate>Tue, 19 Sep 2017 16:52:35 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h2 id=&quot;导航&quot;&gt;&lt;a href=&quot;#导航&quot; class=&quot;headerlink&quot; title=&quot;导航&quot;&gt;&lt;/a&gt;导航&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.zcool.com.cn/&quot; target=&quot;_blank&quot;
          
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><ul><li><a href="http://www.zcool.com.cn/" target="_blank" rel="noopener">站酷 (ZCOOL) - 设计师互动平台</a></li><li><a href="http://www.uisdc.com/" target="_blank" rel="noopener">优设-UISDC: 优秀网页设计联盟-SDC-网页设计师交流平台-听讲座，聊设计，找素材，尽在优设网</a></li><li><a href="http://www.uehtml.com/" target="_blank" rel="noopener">E设计平台-网页设计，设计交流，界面设计，酷站欣赏</a></li></ul><h2 id="高清图片资源"><a href="#高清图片资源" class="headerlink" title="高清图片资源"></a>高清图片资源</h2><ul><li><a href="https://pixabay.com/" target="_blank" rel="noopener">https://pixabay.com/</a></li><li><a href="http://www.gratisography.com/" target="_blank" rel="noopener">http://www.gratisography.com/</a></li><li><a href="https://picjumbo.com/" target="_blank" rel="noopener">https://picjumbo.com/</a></li><li><a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a></li><li><a href="http://publicdomainarchive.com/" target="_blank" rel="noopener">http://publicdomainarchive.com/</a></li><li><a href="https://marketplace.500px.com" target="_blank" rel="noopener">https://marketplace.500px.com</a></li></ul>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/09/19/source-nav/#disqus_thread</comments>
    </item>
    
    <item>
      <title>npm相关资源整理</title>
      <link>https://cosmeapp.github.io/2017/09/19/npm-source/</link>
      <guid>https://cosmeapp.github.io/2017/09/19/npm-source/</guid>
      <pubDate>Tue, 19 Sep 2017 11:41:35 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;blockquote&gt;&lt;p&gt;npm（全称Node Package Manager，即node包管理器）是Node.js默认的、以JavaScript编写的软件包管理系统。 - &lt;a href=&quot;https://zh.wikipedia.org/wiki/Npm&quot;
          
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>npm（全称Node Package Manager，即node包管理器）是Node.js默认的、以JavaScript编写的软件包管理系统。 - <a href="https://zh.wikipedia.org/wiki/Npm" target="_blank" rel="noopener">来自wikipedia</a></p></blockquote><p>本文首发在<a href="https://cosmeapp.github.io/2017/09/19/npm-source/">美妆心得技术博客</a>，同步到前端开发者说博客。</p><h2 id="npm镜像"><a href="#npm镜像" class="headerlink" title="npm镜像"></a>npm镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config set registry &quot;https://registry.npm.taobao.org&quot;</span><br></pre></td></tr></table></figure><p>其他镜像，用于提高安装速度，比如用<code>vue-cli</code>初始化项目。在<code>~/.npmrc</code>中添加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">registry=https://registry.npm.taobao.org/</span><br><span class="line">// https://registry.npmjs.org=true</span><br><span class="line">// https://blog.niceue.com/front-end-development/using-domestic-npm-images.html=true</span><br><span class="line">// http://www.cnblogs.com/huang0925/archive/2013/05/17/3083207.html=true</span><br><span class="line">electron_mirror=https://npm.taobao.org/dist/electron/</span><br><span class="line">sass_binary_site=https://npm.taobao.org/dist/node-sass</span><br><span class="line">phantomjs_cdnurl=https://npm.taobao.org/dist/phantomjs</span><br><span class="line">// https://gist.github.com/52cik/c1de8926e20971f415dd=true</span><br><span class="line">chromedriver_cdnurl=https://npm.taobao.org/dist/chromedriver</span><br><span class="line">disturl=https://npm.taobao.org/dist</span><br><span class="line">operadriver_cdnurl=https://npm.taobao.org/mirrors/operadriver</span><br><span class="line">selenium_cdnurl=https://npm.taobao.org/mirrors/selenium</span><br><span class="line">node_inspector_cdnurl=https://npm.taobao.org/mirrors/node-inspector</span><br><span class="line">// 自定义的npm scope</span><br><span class="line">@x-scaffold:registry=https://registry.npmjs.org/</span><br></pre></td></tr></table></figure><p>关于关于更多的镜像资料，可以参考我之前写的文章<a href="https://huixisheng.github.io/%2Fmirror%2F" target="_blank" rel="noopener">国内镜像源整理</a></p><h2 id="npm搜索"><a href="#npm搜索" class="headerlink" title="npm搜索"></a>npm搜索</h2><p><a href="https://libraries.io/npm" target="_blank" rel="noopener">https://libraries.io/npm</a> 相关资源的各种排行榜</p><p><a href="https://npms.io/" target="_blank" rel="noopener">npms</a> A better and open source search for node packages</p><p><a href="https://www.npmjs.com/browse/updated" target="_blank" rel="noopener">recently updated packages</a></p><p><a href="https://unpkg.com/#/" target="_blank" rel="noopener">npm 资源的cdn</a></p><p><a href="https://github.com/anvaka/npmrank/tree/master/sample" target="_blank" rel="noopener">整理的Top100</a></p><p><a href="https://www.npmjs.com/browse/depended" target="_blank" rel="noopener">most depended-upon packages</a></p><p><a href="https://colorlib.com/wp/npm-packages-node-js/" target="_blank" rel="noopener">Top 30 NPM Packages for Node.js Developers 2016</a></p><p><a href="https://www.npmjs.com/browse/depended" target="_blank" rel="noopener">most depended-upon packages</a></p><h2 id="npm包资源搜索q"><a href="#npm包资源搜索q" class="headerlink" title="npm包资源搜索q"></a>npm包资源搜索q</h2><p><a href="https://pnpm.js.org/" target="_blank" rel="noopener">pnpm</a> Fast, disk space efficient package manager</p><p><a href="https://npm.taobao.org/" target="_blank" rel="noopener">cnpm</a> 淘宝 NPM 镜像</p><p><a href="https://yarnpkg.com/zh-Hans/" target="_blank" rel="noopener">yarn</a></p><blockquote><p>Yarn 对你的代码来说是一个包管理器， 它允许你使用并分享代码给全世界的开发者， Yarn 做这些快捷、安全、可靠，所以你不用担心什么。</p></blockquote><p>设置国内镜像<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn config set registry https://registry.npm.taobao.org --global</span><br><span class="line">$ yarn config set disturl https://npm.taobao.org/dist --global</span><br></pre></td></tr></table></figure><p></p><p>这个facebook应该不会加类似React的协议吧？</p><p>会生成一个<code>yarn.lock</code>锁定依赖。</p><p>优点(摘自官网)</p><ul><li>离线模式</li><li>确定性</li><li>网络性能</li><li>相同的软件包</li><li>网络适应</li><li>扁平模式</li></ul><p>例外有看到社区</p><p><a href="https://cnodejs.org/topic/57ff0541487e1e4578afb48d" target="_blank" rel="noopener">「CYarn」使用 cnpm 源的 Yarn</a></p><p><a href="https://github.com/qiu8310/smart-npm/" target="_blank" rel="noopener">smart-npm</a> 在各大社区发布后，就没看到更多了。</p><p><a href="https://zhuanlan.zhihu.com/p/27832595" target="_blank" rel="noopener">npx: npm 5.2.0 内置的包执行器</a></p><p>推荐阅读</p><ul><li><a href="http://geek.csdn.net/news/detail/197339" target="_blank" rel="noopener">一文看懂npm、yarn、pnpm之间的区别</a></li><li><a href="https://zhuanlan.zhihu.com/p/23493436" target="_blank" rel="noopener">Yarn vs npm：你需要知道的一切</a></li><li><a href="https://github.com/pnpm/node-package-manager-benchmark" target="_blank" rel="noopener">更多npm与yarn的性能对比</a></li><li><a href="https://mp.weixin.qq.com/s/9BGiuO-clwe4AAlV9Puqng" target="_blank" rel="noopener">npm 5.0 新版功能特性解析及与 yarn 评测对比</a></li><li><a href="https://www.zhihu.com/question/24414899" target="_blank" rel="noopener">npm、bower、jamjs 等包管理器，哪个比较好用？</a></li><li><a href="https://www.zhihu.com/question/51502849" target="_blank" rel="noopener">如何评价Facebook推出的JavaScript模块管理器yarn？</a></li><li><a href="">在中国，安装 &amp; 升级 npm 依赖的正确方法</a></li></ul><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul><li><a href="https://docs.npmjs.com/" target="_blank" rel="noopener">https://docs.npmjs.com/</a></li><li><a href="http://semver.org/lang/zh-CN/" target="_blank" rel="noopener">semver语义化版本 2.0.0</a></li><li><a href="http://www.cnblogs.com/huang0925/archive/2013/05/17/3083207.html" target="_blank" rel="noopener">Npm的配置管理及设置代理</a></li></ul><h2 id="依赖升级"><a href="#依赖升级" class="headerlink" title="依赖升级"></a>依赖升级</h2><p>见 <a href="https://docs.npmjs.com/cli/update" target="_blank" rel="noopener">npm update [-g] [<pkg>…]</pkg></a></p><p><a href="https://www.npmjs.com/package/npm-check-updates" target="_blank" rel="noopener">npm-check-updates</a></p><p><a href="https://github.com/dylang/npm-check" target="_blank" rel="noopener">npm-check</a></p><blockquote><p>Check for outdated, incorrect, and unused dependencies.</p></blockquote><p><img src="/images/npm/npm-check.jpeg" alt=""></p><p>相关的介绍可以参考<a href="https://cnodejs.org/topic/5705cd70c5f5b4a959e9192a" target="_blank" rel="noopener">Node.js开源项目推荐：npm模块升级工具 npm-check</a></p><h3 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h3><ul><li><a href="https://gxnotes.com/article/12726.html" target="_blank" rel="noopener">如何将package.json中的每个依赖关系更新为最新版本？</a></li></ul><h2 id="Node升级"><a href="#Node升级" class="headerlink" title="Node升级"></a>Node升级</h2><h3 id="n"><a href="#n" class="headerlink" title="n"></a><a href="https://github.com/tj/n" target="_blank" rel="noopener">n</a></h3><blockquote><p>Node.js version management: no subshells, no profile setup, no convoluted API, just simple.</p></blockquote><h3 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a><a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a></h3><blockquote><p>Node Version Manager - Simple bash script to manage multiple active node.js versions</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://github.com/siddharthkp/cost-of-modules" target="_blank" rel="noopener">Cost of modules</a></p><blockquote><p>Find out which of your dependencies is slowing you down</p></blockquote><p><img src="https://raw.githubusercontent.com/siddharthkp/cost-of-modules/master/screenshot.jpg" alt=""></p><p><a href="https://github.com/sindresorhus/awesome-npm" target="_blank" rel="noopener">https://github.com/sindresorhus/awesome-npm</a></p><p><a href="https://juejin.im/post/59256b6f8d6d810058045336" target="_blank" rel="noopener">【译】用8个 npm 技巧打动你的同事</a></p>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/09/19/npm-source/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Travis CI 系列：自动化部署博客</title>
      <link>https://cosmeapp.github.io/2017/09/18/travis-ci-auto-build/</link>
      <guid>https://cosmeapp.github.io/2017/09/18/travis-ci-auto-build/</guid>
      <pubDate>Mon, 18 Sep 2017 02:11:19 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;p&gt;先引出今天的主角：Travis CI （撒花 ~ 撒花 ~）&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Travis CI 是在软件开发领域中的一个在线的，分布式的持续集成服务，用来构建及测试在GitHub托管的代码。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img
          
        
      
      </description>
      
      <content:encoded><![CDATA[<p>先引出今天的主角：Travis CI （撒花 ~ 撒花 ~）</p><blockquote><p>Travis CI 是在软件开发领域中的一个在线的，分布式的持续集成服务，用来构建及测试在GitHub托管的代码。</p></blockquote><p><img src="https://cdn.stephencode.com/article/travis/travis.jpg" alt="travis ci"></p><p>最近变得更懒了，觉得每次本地提交代码到 GitHub 上后还要去服务器上拉取文件，完成所谓的部署工作有点麻烦。所以想要让这样的一个过程自动化，那么也就有了今天的这番折腾了~</p><p>其实我的部署之路也是从石器时代逐步到蒸汽时代再到电气时代的。。。</p><p>最开始，通过 FTP 传文件的方式，在每一次对本地文件进行修改并在本地环境测试通过后，通过 FTP 传输到远程服务器，然后在线上看看有没有问题（这里可能有人会问，为什么不中间搞个测试服务器？我一个个人博客网站搞那么多步骤不是得搞死自己么，好吧，其实是我懒。。。），这里有一个很要命的问题，有时候可能一下子改了很多文件，然后等到测试完成要上传的时候。。。嗯，忘记都改了哪些文件了，那怎么办啊，还是有办法的，把整个项目都上传一遍（那时候还没用上 Git 呢，别跟我扯 Git 这一套，我不听我不听我不听）。</p><p>之后，将自己的博客放上了“基友交流网” —— GitHub，然后用上了偶像 Linus 又一具有世界级影响力的版本控制软件，从此再也不用记住自己改了哪些文件了。测试完 push 一下，登录远程服务器 pull 一下，就搞定了。</p><p>年纪大起来了，不想每次 push 上去后还要登录自己的服务器 pull 一下，懒病再次发挥了至关重要的作用，它迫使我接入 Travis CI 持续集成。。。</p><p>然后，嗯，上了 Travis 这条“贼船” ~</p><p>对于 GitHub 的集成 Travis 做得很好，与 Jenkis 不同，Travis 不需要自己在服务器部署服务，并且是高度集成 GitHub 的，所以对于开源项目还是非常友好的。</p><p>开始这次磕磕绊绊的集成之旅~</p><h2 id="注册配置-Travis"><a href="#注册配置-Travis" class="headerlink" title="注册配置 Travis"></a>注册配置 Travis</h2><p>万事开头难，不，每次注册都是最容易的，更何况还是使用 GitHub 第三方授权登录呢~</p><p>注册成功，登录，然后添加自己的 GitHub 上的 repo</p><p><img src="https://cdn.stephencode.com/article/travis/add-repo.jpg" alt="add repo"></p><p>选择其中一个或多个你需要集成的项目，开启 build，也就是点击叉叉变成勾勾的过程。</p><p>假设现在已经对某个项目开启了 Travis，那么先去看看 Settings 里默认开启的那几项，根据自己实际需求进行设置，没什么特殊需求默认的设置就可以了。</p><p>接下来的步骤很清楚，官方也有配图说明：</p><p><img src="https://cdn.stephencode.com/article/travis/buil-step.png" alt="build step"></p><h3 id="添加-travis-yml"><a href="#添加-travis-yml" class="headerlink" title="添加 .travis.yml"></a>添加 .travis.yml</h3><p>说白了接下来的事情都是如何去写这个配置文件，因为 Travis 全是根据这个配置文件去执行相应动作的。</p><p>根据你的语言不同，配置也会有较大差异，因为我的博客使用 PHP 的流行框架 Laravel 写的，所以这里也拿它作为例子，官方给出的最精简的 PHP 配置文件是：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">php</span></span><br><span class="line"></span><br><span class="line"><span class="attr">php:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">7.1</span><span class="number">.9</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">nightly</span></span><br></pre></td></tr></table></figure><h3 id="触发构建"><a href="#触发构建" class="headerlink" title="触发构建"></a>触发构建</h3><p>接下来如上面所说的第三步，将这个 <code>.travis.yml</code> 文件提交到 GitHub，那么 Travis 就会自动触发构建任务。</p><p>我就知道第一次不会这么简单的，失败了。。。</p><p>报错原因是执行 <code>phpunit</code> 时提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP Warning:  require(/home/travis/build/stephencode/super-admin/bootstrap/../vendor/autoload.php): failed to open stream: No such file or directory in /home/travis/build/stephencode/super-admin/bootstrap/autoload.php on line 17</span><br></pre></td></tr></table></figure><p>一看是自己项目的 composer 依赖包的 <code>autoload.php</code> 文件没找到，那应该是没有执行 <code>composer up</code> 之类的操作，结合网上找的资料，比较好的解决方式是在 <code>install</code> 层添加一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">install:</span><br><span class="line">  - composer install --prefer-dist --optimize-autoloader --quiet</span><br></pre></td></tr></table></figure><p>这样就不会报上面这个错了，然后会报接下来的一个错。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1) Tests\Feature\RouteTest::testBasicTest</span><br><span class="line">RuntimeException: No application encryption key has been specified.</span><br></pre></td></tr></table></figure><p>其实这个是我在 Laravel 里面的 <code>phpunit.xml</code> 没有配置好的缘故。将 <code>&lt;env name=&quot;APP_KEY&quot; value=&quot;base64:xxxxxx=&quot;/&gt;</code> 补上就好，在 <code>&lt;php&gt;&lt;/php&gt;</code> 标签里，这个 key 你自己去生成。</p><p>在经过五六次 build failed 之后，总算天不负我了。</p><p><img src="https://cdn.stephencode.com/article/travis/build-failed.png" alt="build failed"></p><h2 id="自动部署到远程服务器"><a href="#自动部署到远程服务器" class="headerlink" title="自动部署到远程服务器"></a>自动部署到远程服务器</h2><p>现在已经可以自动构建了，那么接下来的一步就是部署到远程服务器。Travis 提供 <code>after_success</code> 来实现这步骤。</p><p>等等，我们要部署到远程服务器，那么势必需要让 Travis 登录到远程服务，那么登录密码怎么处理才能保证安全？这是首先要解决的问题，明文肯定是不行的。</p><h3 id="加密登录密码"><a href="#加密登录密码" class="headerlink" title="加密登录密码"></a>加密登录密码</h3><p>那看来先得解决这个问题，Travis Docs 里也帮我考虑到了这个避不开的问题的解决方案（<a href="https://docs.travis-ci.com/user/encrypting-files/" target="_blank" rel="noopener">Encrypting Files</a>）</p><p>我们一起来实践一下：</p><p>首先通过 Ruby 的 gem 安装 travis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install travis</span><br></pre></td></tr></table></figure><p>哎，重试了几次发现敲完这段 shell 如同石沉大海一般，屁都不放一个。。。就算开了代理还是纹丝不动，没办法只能换镜像了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources -l</span><br><span class="line"></span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">https://rubygems.org/</span><br></pre></td></tr></table></figure><p>查看一下当前的镜像，这货（rubygems）国内出奇的难以访问，网上一搜国内的镜像源，<a href="http://gems.ruby-china.org/" target="_blank" rel="noopener">Ruby China</a> 的应该很显眼吧~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gem update --system</span><br><span class="line">$ gem sources --add https://gems.ruby-china.org/</span><br></pre></td></tr></table></figure><p>然后再查看一下 gem 镜像，确保只有 Ruby China 的 gem 源。</p><p>好了，现在可以愉快的安装 travis 了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gem install travis</span><br></pre></td></tr></table></figure><p>接下来让我们先在命令行中登录 Travis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ travis login</span><br><span class="line"></span><br><span class="line">We need your GitHub login to identify you.</span><br><span class="line">This information will not be sent to Travis CI, only to api.github.com.</span><br><span class="line">The password will not be displayed.</span><br><span class="line"></span><br><span class="line">Try running with --github-token or --auto if you don&apos;t want to enter your password anyway.</span><br><span class="line"></span><br><span class="line">Username: xxx@xxx.xxx</span><br><span class="line">Password for xxx@xxx.xxx: ***</span><br><span class="line">Successfully logged in as demo!</span><br></pre></td></tr></table></figure><p>会要求你输入 GitHub 的账号密码，这个是走 GitHub 的服务，所以不用担心密码泄露。</p><p>将目录切换到项目根目录下，也就是 <code>.travis.yml</code> 目录下。因为我们需要让 travis 远程登录自己的服务器，所以需要将本地保存着的 SSH 私钥进行加密处理（默认你也是通过 SSH 免密登录的模式哦，不清楚可以参考我这一篇 <a href="https://blog.stephencode.com/p/ssh_login_no_pwd.html" target="_blank" rel="noopener">《SSH 系列：免密登录远程服务器》</a>）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ travis encrypt-file ~/.ssh/id_rsa --add</span><br><span class="line"></span><br><span class="line">Detected repository as xxx/xxx, is this correct? |yes| yes</span><br><span class="line">encrypting ~/.ssh/id_rsa for xxx/xxx</span><br><span class="line">storing result as id_rsa.enc</span><br><span class="line">storing secure env variables for decryption</span><br><span class="line"></span><br><span class="line">Make sure to add id_rsa.enc to the git repository.</span><br><span class="line">Make sure not to add ~/.ssh/id_rsa to the git repository.</span><br><span class="line">Commit all changes to your .travis.yml.</span><br></pre></td></tr></table></figure><p>这个时候去看一下当前目录下的 <code>.travis.yml</code>，会多出几行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before_install:</span><br><span class="line">  - openssl aes-256-cbc -K $encrypted_d89376f3278d_key -iv $encrypted_d89376f3278d_iv</span><br><span class="line">  -in id_rsa.enc -out ~\/.ssh/id_rsa -d</span><br></pre></td></tr></table></figure><p>为保证权限正常，多加一行设置权限的 shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">before_install:</span><br><span class="line">  - openssl aes-256-cbc -K $encrypted_d89376f3278d_key -iv $encrypted_d89376f3278d_iv</span><br><span class="line">    -in id_rsa.enc -out ~/.ssh/id_rsa -d</span><br><span class="line">  - chmod 600 ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>还有一点可能会用上，因为 travis 第一次登录远程服务器会出现 SSH 主机验证，这边会有一个主机信任问题。官方给出的方案是添加 addons 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addons:</span><br><span class="line">  ssh_known_hosts: your-ip</span><br></pre></td></tr></table></figure><p>到这里，travis 就能够免密登录自己的远程服务器啦~</p><h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><p>既然已经可以免密登录服务器了，那么写一个部署脚本，在登录时执行该脚本就可以了，一切就是这么顺其自然就好~</p><h3 id="写部署脚本"><a href="#写部署脚本" class="headerlink" title="写部署脚本"></a>写部署脚本</h3><p>我写 Shell 脚本的水平很有限，这边也就给出一个最精简的 Demo 可以参考一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /path/to/your-project</span><br><span class="line">git pull origin master</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'travis build done!'</span></span><br></pre></td></tr></table></figure><h3 id="执行部署脚本"><a href="#执行部署脚本" class="headerlink" title="执行部署脚本"></a>执行部署脚本</h3><p>在 <code>.travis.yml</code> 配置文件中写下这么两行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">after_success:</span><br><span class="line">  - ssh your-user@your-ip &quot;./your-shell-script&quot;</span><br></pre></td></tr></table></figure><p>记得将其中的 <code>your-user</code>、<code>your-ip</code>、<code>your-shell-script</code> 都替换成自己的哦！</p><h2 id="高大上标志"><a href="#高大上标志" class="headerlink" title="高大上标志"></a>高大上标志</h2><p>辛苦奋斗了一天，总是希望别人看到自己的劳动成果的，除了写这篇文章意外还能做点什么呢？那自然是给自己的这个项目在 GitHub 上的 README.md 中显示一个高大上的 <code>build:passing</code> 标志，就像这样：</p><p><img src="https://cdn.stephencode.com/article/travis/build-tag.png" alt="build tag"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次过程中基本都是从不会到会的一个学习过程，从中了解到不少新东西，也发现一些自己的短板，比如写 shell 脚本。。。</p><p>最后，贴出我自己的 <code>.travis.yml</code>，里面有关涉及个人隐私的部分我会注释并说明：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">php</span></span><br><span class="line"></span><br><span class="line"><span class="attr">php:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">7.1</span><span class="number">.9</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">nightly</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">APP_DEBUG=false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="bullet">-K</span> <span class="string">$encrypted_d89376f3278d_key</span> <span class="bullet">-iv</span> <span class="string">$encrypted_d89376f3278d_iv</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">in</span> <span class="string">id_rsa.enc</span> <span class="bullet">-out</span> <span class="string">~/.ssh/id_rsa</span> <span class="bullet">-d</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">composer</span> <span class="string">install</span> <span class="bullet">--prefer-dist</span> <span class="bullet">--optimize-autoloader</span> <span class="bullet">--quiet</span></span><br><span class="line"></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line"><span class="attr">  email:</span></span><br><span class="line"><span class="attr">    recipients:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">stephenfxl@gmail.com</span></span><br><span class="line"><span class="attr">    on_success:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    on_failure:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">phpunit</span> <span class="bullet">-c</span> <span class="string">phpunit.xml</span> <span class="bullet">--coverage-text</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ssh</span> <span class="string">xxx@xxxx.xxxx.xxxx.xxxx</span> <span class="string">"./travis_build"</span> <span class="comment"># 请替换成自己的登录IP和登录用户</span></span><br><span class="line"></span><br><span class="line"><span class="attr">addons:</span></span><br><span class="line"><span class="attr">  ssh_known_hosts:</span> <span class="string">xxxx.xxxx.xxxx.xxxx</span> <span class="comment"># 请替换成自己的服务器IP</span></span><br></pre></td></tr></table></figure><p>本文参考链接：</p><ul><li><a href="https://www.liaoxuefeng.com/article/0014631488240837e3633d3d180476cb684ba7c10fda6f6000" target="_blank" rel="noopener">使用Travis进行持续集成</a></li><li><a href="https://mritd.me/2017/02/25/jekyll-blog-+-travis-ci-auto-deploy/" target="_blank" rel="noopener">Jekyll + Travis CI 自动化部署博客</a></li></ul>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/09/18/travis-ci-auto-build/#disqus_thread</comments>
    </item>
    
    <item>
      <title>美妆心得技术周刊2017-09-17</title>
      <link>https://cosmeapp.github.io/2017/09/17/weekly-2017-09-17/</link>
      <guid>https://cosmeapp.github.io/2017/09/17/weekly-2017-09-17/</guid>
      <pubDate>Sun, 17 Sep 2017 07:01:09 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;blockquote&gt;&lt;p&gt;安卓&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;自定义AlertDialog在android-7.0上距离屏幕边界margin无法消除问题 &lt;a
          
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>安卓</p></blockquote><p>自定义AlertDialog在android-7.0上距离屏幕边界margin无法消除问题 <a href="http://blog.csdn.net/kuixiaoba/article/details/70579665" target="_blank" rel="noopener">http://blog.csdn.net/kuixiaoba/article/details/70579665</a></p><p>ViewStub学习<a href="http://rkhcy.github.io/2017/09/12/ViewStub%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">http://rkhcy.github.io/2017/09/12/ViewStub%E5%AD%A6%E4%B9%A0/</a></p><p>Android截屏与WebView长图分享经验总结 <a href="http://www.jianshu.com/p/8b1bcbbae4e7" target="_blank" rel="noopener">http://www.jianshu.com/p/8b1bcbbae4e7</a></p><blockquote><p>Android系统并没有截屏事件通知。通过监听系统相册资源变换获取截屏图片，匹配图片名称关键字，来获得截屏事件，但会有明显延迟。</p></blockquote><p>android中的bitmap <a href="http://www.jianshu.com/p/98c88f9ceafa" target="_blank" rel="noopener">http://www.jianshu.com/p/98c88f9ceafa</a></p><blockquote><p>IOS</p></blockquote><p>简书App适配iOS 11<a href="http://www.cocoachina.com/ios/20170915/20580.html" target="_blank" rel="noopener">http://www.cocoachina.com/ios/20170915/20580.html</a></p><p>对于iOS开发，人工智能意味着什么？ <a href="http://www.jianshu.com/p/83b99f34d67c" target="_blank" rel="noopener">http://www.jianshu.com/p/83b99f34d67c</a></p><blockquote><p>前端</p></blockquote><blockquote><p>收集整理Vue和vue-router相关生命周期介绍很不错的文章，想对Vue有深入了解的伙伴，推荐阅读。完全熟悉生命周期后对写组件，特别是组件的扩展性也很大的帮助</p></blockquote><ul><li>Vue2.0 探索之路——生命周期和钩子函数的一些理解 <a href="https://segmentfault.com/a/1190000008010666" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008010666</a></li><li>Vue.js 生命周期和route的生命周期讲解 <a href="http://www.jianshu.com/p/e9f884b6ba6c" target="_blank" rel="noopener">http://www.jianshu.com/p/e9f884b6ba6c</a></li><li>keep-alive的深入理解与使用(配合router-view缓存整个路由页面) <a href="https://segmentfault.com/a/1190000010546663" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010546663</a></li><li>Vue学习：生命周期 <a href="http://www.charlycheng.xyz/2016/12/13/Vue%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/" target="_blank" rel="noopener">http://www.charlycheng.xyz/2016/12/13/Vue%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</a></li><li>vue生命周期探究（二）<a href="https://segmentfault.com/a/1190000008923105" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008923105</a></li><li>Vue2.0 探索之路——生命周期和钩子函数的一些理解 <a href="https://segmentfault.com/a/1190000008010666" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008010666</a></li></ul><blockquote><p>设计</p></blockquote><p>一个设计师的自我反思：<a href="http://mp.weixin.qq.com/s/ap1SlxaZg5OpvBglLLzm4Q" target="_blank" rel="noopener">http://mp.weixin.qq.com/s/ap1SlxaZg5OpvBglLLzm4Q</a></p><p>90%的设计师没注意过的细节：<a href="http://mp.weixin.qq.com/s/KiZEcLTBXC_LFJ32YBbOHw" target="_blank" rel="noopener">http://mp.weixin.qq.com/s/KiZEcLTBXC_LFJ32YBbOHw</a></p><blockquote><p>工具和资源</p></blockquote><p>推荐一个配色 （A dark theme for Atom, Alfred, Emacs, Highlight.js, Hyper, iTerm, JetBrains, Pygments, Slack, Sublime Text, TextMate, Terminal.app, Vim, Xcode, Zsh and many more.）<br><a href="https://draculatheme.com/" target="_blank" rel="noopener">https://draculatheme.com/</a></p><p>批量修改文件名命令rename<br>rename命令，brew install rename, 可使用正则进行文件名批量修改<br>简单的使用举例：<a href="http://www.cnblogs.com/raomengyang/p/6038561.html" target="_blank" rel="noopener">http://www.cnblogs.com/raomengyang/p/6038561.html</a></p><p>Web 开发者需要知道的 12 个终端命令 <a href="https://www.oschina.net/translate/12-terminal-commands-every-web-developer-should-know?lang=chs&amp;page=1#" target="_blank" rel="noopener">https://www.oschina.net/translate/12-terminal-commands-every-web-developer-should-know?lang=chs&amp;page=1#</a></p><p>12个命令有部分用过，感觉还有其他一些命令也很好用，比如cat、cp、mv、rm。</p><p>附简单bash命令和语法 <a href="https://github.com/OMGZui/bash-step-to-step" target="_blank" rel="noopener">https://github.com/OMGZui/bash-step-to-step</a></p><p>Awesome Mac 收录了许多好用的mac应用程序 <a href="https://github.com/jaywcjlove/awesome-mac/blob/master/README-zh.md" target="_blank" rel="noopener">https://github.com/jaywcjlove/awesome-mac/blob/master/README-zh.md</a></p><p>听说atom出了atom-ide，然后就翻车了？ <a href="https://juejin.im/post/59b8f34a6fb9a00a5a31d7d5" target="_blank" rel="noopener">https://juejin.im/post/59b8f34a6fb9a00a5a31d7d5</a></p><blockquote><p>测试</p></blockquote><p>你不得不知道的流程规范@测试基本流程：<a href="http://mp.weixin.qq.com/s/GlVgxI7MQtFHB628E03wPA" target="_blank" rel="noopener">http://mp.weixin.qq.com/s/GlVgxI7MQtFHB628E03wPA</a></p><blockquote><p>产品及其他</p></blockquote><p>只需一个中秋，京东企业购就能变身“独角兽”？ <a href="http://www.pmcaff.com/article/index/931508217006208?from=label&amp;pmc_param%5Blabel_name%5D=" target="_blank" rel="noopener">http://www.pmcaff.com/article/index/931508217006208?from=label&amp;pmc_param%5Blabel_name%5D=</a> [ps: 法定节假日 618年中大促 双十一 双十二，各种有的已有的节日或被创造出来的节日，需要一个故事来营造一个购物的氛围，激发用户的消费欲望，转化为app的活跃度。在保持核心理念不变的前提了，变着法的刺激用户,告诉用户我（app）很好玩诶。</p><p>刚刚！比特币暴跌到18080元，13天暴跌44%！：<a href="https://bbs.feidee.com/thread-1308620-1-1.html" target="_blank" rel="noopener">https://bbs.feidee.com/thread-1308620-1-1.html</a></p><p>引导好评弹窗该怎么玩？<a href="http://www.jianshu.com/p/91922e2b58fb" target="_blank" rel="noopener">http://www.jianshu.com/p/91922e2b58fb</a> （喜马拉雅的弹窗加上萌图很讨喜）</p><p>Axure RP 8 教程：基础设置 <a href="http://www.woshipm.com/rp/759235.html" target="_blank" rel="noopener">http://www.woshipm.com/rp/759235.html</a></p><p><strong>本周刊由团队成员推荐整理而成，内容来自互联网</strong></p>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/09/17/weekly-2017-09-17/#disqus_thread</comments>
    </item>
    
    <item>
      <title>开篇如何通过hexo创建blog</title>
      <link>https://cosmeapp.github.io/2017/09/08/create-hexo-blog/</link>
      <guid>https://cosmeapp.github.io/2017/09/08/create-hexo-blog/</guid>
      <pubDate>Fri, 08 Sep 2017 15:58:19 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;p&gt;此为团队博客开篇，让技术部的知识沉淀下来，这是一个好的开始。算是技术部的一个坑，让大家都参与进来。本文介绍通过hexo如何搭建技术博客。&lt;/p&gt;&lt;p&gt;为何选择hexo，支持&lt;code&gt;markdown&lt;/code&gt;，最主要是先有个平台有内容产出，有内容了什么都好说，选择其他
          
        
      
      </description>
      
      <content:encoded><![CDATA[<p>此为团队博客开篇，让技术部的知识沉淀下来，这是一个好的开始。算是技术部的一个坑，让大家都参与进来。本文介绍通过hexo如何搭建技术博客。</p><p>为何选择hexo，支持<code>markdown</code>，最主要是先有个平台有内容产出，有内容了什么都好说，选择其他框架、自定义主题或者自行开发一个适合自己的博客系统。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>安装之前先安装nodejs ，下载地址 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br><span class="line">$ git init // 添加仓库</span><br><span class="line">$ git remote add origin git@github.com:cosmeapp/cosmeapp.github.com.git</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next // 安装主题，记得切换到hexo站点目录下</span><br></pre></td></tr></table></figure><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new post create-hexo-blog</span><br><span class="line">$ hexo new weekly  weekly-2017-05-06 // 创建周刊模板</span><br></pre></td></tr></table></figure><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -g</span><br></pre></td></tr></table></figure><h3 id="构建发布"><a href="#构建发布" class="headerlink" title="构建发布"></a>构建发布</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy -g</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="hexo-deployer-git"><a href="#hexo-deployer-git" class="headerlink" title="hexo-deployer-git"></a>hexo-deployer-git</h3><blockquote><p>Git deployer plugin for Hexo.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save-dev</span><br></pre></td></tr></table></figure><p>配置<code>_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:cosmeapp/cosmeapp.github.com.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>配置<code>_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>其他具体的配置参考<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></p><h3 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a><a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">Gitalk</a></h3><blockquote><p>Gitalk 是一个基于 Github Issue 和 Preact 开发的评论插件</p></blockquote><p>因公司业务调整多说项目于2017年6月1日正式关停服务。于是考虑使用<code>Gitalk</code>代替。</p><p><code>NexT</code>主题集成<code>Gittalk</code>，这个可以发个pr</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+++ b/layout/_partials/comments.swig</span><br><span class="line">@@ -32,4 +32,5 @@</span><br><span class="line">       &lt;div id=&quot;vcomments&quot;&gt;&lt;/div&gt;</span><br><span class="line">     &#123;% endif %&#125;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">+  &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</span><br><span class="line"> &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">+++ b/layout/_third-party/comments/index.swig</span><br><span class="line"> &#123;% include &apos;valine.swig&apos; %&#125;</span><br><span class="line">+&#123;% include &apos;gittalk.swig&apos; %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.comments %&#125;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/gitalk/gitalk.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;/gitalk/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var gitalk = new Gitalk(&#123;</span><br><span class="line">  clientID: &apos;cb9d990636e84547cadb&apos;,</span><br><span class="line">  clientSecret: &apos;78036da2ca2985c3df477c76c407a120ae664368&apos;,</span><br><span class="line">  repo: &apos;cosmeapp.github.com&apos;,</span><br><span class="line">  owner: &apos;cosmeapp&apos;,</span><br><span class="line">  id: &apos;&apos;,</span><br><span class="line">  title: &apos;&#123;&#123; page.title &#125;&#125;&apos;,</span><br><span class="line">  body: &apos;&#123;&#123; page.permalink &#125;&#125;\n\n&#123;&#123; page.title &#125;&#125;&apos;,</span><br><span class="line">  labels: [&apos;Gitalk&apos;&#123;% if page.tags and page.tags.length %&#125;&#123;% for tag in page.tags %&#125;,&apos;&#123;&#123; tag.name &#125;&#125;&apos;&#123;% endfor %&#125;&#123;% endif %&#125;],</span><br><span class="line">  admin: [&apos;huixisheng&apos;],</span><br><span class="line">  distractionFreeMode: true</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gitalk.render(&apos;gitalk-container&apos;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>不想设置<code>id</code>成为<code>labels</code>。于是下载<code>Gitalk</code>源码修改，但构建的时候报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ERROR in ./src/index.js</span><br><span class="line">Module parse failed: ~/gitalk/src/index.js Unexpected token (23:18)</span><br><span class="line">You may need an appropriate loader to handle this file type.</span><br><span class="line">|     &#125;</span><br><span class="line">|</span><br><span class="line">|     return render(&lt;GitalkComponent options=&#123;this.options&#125;/&gt;, node)</span><br><span class="line">|   &#125;</span><br><span class="line">| &#125;</span><br><span class="line"> @ multi (webpack)-dev-server/client?http://localhost:8000 webpack/hot/dev-server ./index.js</span><br></pre></td></tr></table></figure><p>很奇怪，看了相关<code>webpack</code>配置并没有什么问题，提了<a href="https://github.com/gitalk/gitalk/issues/23" target="_blank" rel="noopener">issue</a>。当然提issue前努力尝试去解决问题，开源的项目不可能连构建都不行。</p><ul><li>尝试升级相关的dependencies，推荐<code>npm-check</code></li><li>删除<code>node_moduels</code>,尝试 <code>npm install</code>和 <code>yarn install</code></li><li>问题初步怀疑是<code>jsx</code>不解析，但是<code>babel-loader</code>配置没问题</li><li>google <code>You may need an appropriate loader to handle this file type.</code> 尝试添加了<code>webpack</code>、<code>babel-loader</code>、<code>jsx</code>等关键词。折腾到凌晨2点多，无果，媳妇喊睡觉</li><li>第二天起来，开始尝试写最简单的<a href="https://github.com/huixisheng/lab/tree/gh-pages/React" target="_blank" rel="noopener">demo</a>，demo跑起来没有问题，对比demo的配置，配置无差。后面发现<code>Gitalk</code>的项目是<code>clone</code>在<code>node_modules</code>目录下，换了目录。项目终于可以跑起来了 @todo 深入为何在<code>node_modules</code>目录下不行？初步设想，应该是<code>nodejs</code>查找依赖，通过配置<code>webpack</code>可以解决</li></ul><p>问题的出现不是偶然，任何问题的出现都是有原因，有可能是一个字母，不同的环境。当出现不可思议的问题时候，需要静下心，慢慢体会碰到问题的苦恼，最终享受问题解决的快乐。</p><p>移除<code>id</code>添加为<code>labels</code><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+++ b/src/gitalk.jsx</span><br><span class="line">@@ -184,7 +184,8 @@ class GitalkComponent extends Component &#123;</span><br><span class="line">       params: &#123;</span><br><span class="line">         client_id: clientID,</span><br><span class="line">         client_secret: clientSecret,</span><br><span class="line">-        labels: labels.concat(id).join(&apos;,&apos;)</span><br><span class="line">+        labels: labels.join(&apos;,&apos;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;).then(res =&gt; &#123;</span><br><span class="line">     return axiosGithub.post(`/repos/$&#123;owner&#125;/$&#123;repo&#125;/issues`, &#123;</span><br><span class="line">       title,</span><br><span class="line">-      labels: labels.concat(id),</span><br><span class="line">+      labels: labels,</span><br></pre></td></tr></table></figure><p></p><p>相关的扩展阅读<a href="https://www.zhihu.com/question/57426274" target="_blank" rel="noopener">如何评价「多说」即将关闭？有什么替代方案？</a></p><p>| replace(r/\d{4}-/g, ‘’)</p><h3 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;hexo-all-minifier&quot;: &quot;^0.2.6&quot;,</span><br><span class="line">&quot;hexo-generator-feed&quot;: &quot;^1.2.2&quot;,</span><br><span class="line">&quot;hexo-generator-seo-friendly-sitemap&quot;: &quot;0.0.21&quot;,</span><br><span class="line">&quot;hexo-wordcount&quot;: &quot;^3.0.2&quot;,</span><br></pre></td></tr></table></figure><h2 id="自定义scaffold"><a href="#自定义scaffold" class="headerlink" title="自定义scaffold"></a>自定义scaffold</h2><p>最初是想实现如下title的日期是自动生成的。但<code>1504886299000</code>会含有时间，直觉<code>filter</code>可以处理。然而没并软，且有报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 美妆心得技术周刊2017-05-06</span><br><span class="line">tags:</span><br><span class="line">  - weekly</span><br><span class="line">date: 2017-05-06 22:16:48</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>于是开始啃代码，从<code>hexo-cli</code>开始</p><p>根据<code>package.json</code> 的 <code>&quot;main&quot;: &quot;lib/hexo&quot;,</code> 和<code>bin/hexo</code>。使用的核心模块是<code>Hexo</code>，初步猜测当前项目的<code>node_moduels</code>存在<code>hexo</code>，就加载该目录下的模块，否则加载全局的。这个跟<code>webpack</code>一样。</p><p>根据提示的报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Template render error: (unknown path) [Line 1, Column 22]</span><br><span class="line">  expected symbol, got string</span><br><span class="line">    ...</span><br><span class="line">    at /Users/huixisheng/cosmeapp.github.com/node_modules/hexo/lib/extend/tag.js:66:9</span><br><span class="line">   ...</span><br><span class="line">    at Tag.render (/Users/huixisheng/cosmeapp.github.com/node_modules/hexo/lib/extend/tag.js:64:10)</span><br><span class="line">    at /Users/huixisheng/cosmeapp.github.com/node_modules/hexo/lib/hexo/post.js:111:16</span><br></pre></td></tr></table></figure><p>定位到<code>post.js</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Post.prototype.create = function(data, replace, callback) &#123;</span><br><span class="line">  // console.log(data);</span><br><span class="line">  // return;</span><br></pre></td></tr></table></figure><p>执行了 <code>_renderScaffold</code></p><p><code>tag.render(yfmSplit.data, frontMatter)</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var placeholder = &apos;\uFFFC&apos;;</span><br><span class="line">var rPlaceholder = /(?:&lt;|&amp;lt;)\!--\uFFFC(\d+)--(?:&gt;|&amp;gt;)/g;</span><br><span class="line"></span><br><span class="line">Tag.prototype.render = function(str, options, callback) &#123;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">return new Promise(function(resolve, reject) &#123;</span><br><span class="line">  str = str.replace(/&lt;pre&gt;&lt;code.*&gt;[\s\S]*?&lt;\/code&gt;&lt;\/pre&gt;/gm, escapeContent);</span><br><span class="line">  env.renderString(str, options, function(err, result) &#123;</span><br></pre></td></tr></table></figure><p>最后发现是<a href="http://mozilla.github.io/nunjucks/cn/templating.html" target="_blank" rel="noopener"><code>nunjucks</code></a>模块引擎解析的。那么这样问题就好办了。于是根据相关语法做配置即可。然后并没有提供<code>filter date</code>的方法，需要添加自定义<code>filter</code>。类试的库有<a href="https://www.google.com.sg/search?biw=1242&amp;bih=703&amp;q=nunjucks+date&amp;oq=nunjucks+date&amp;gs_l=psy-ab.3...5873433.5873948.0.5874188.5.5.0.0.0.0.0.0..0.0....0...1.1.64.psy-ab..5.0.0.lMlZdOVppgE" target="_blank" rel="noopener"><code>nunjucks-date</code></a>。添加库需要涉及到<code>hexo</code>源码的修改，是否可以从原有的<code>filter</code>做文章。于是找到<code>replace</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 美妆心得技术周刊&#123;&#123; date | replace(r/\s.*/g, &quot;&quot;)  &#125;&#125;</span><br></pre></td></tr></table></figure><p>关于<code>Hexo</code>源码的阅读还需更深入。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="http://johnwonder.github.io/2016/09/29/hexo-scaffold/" target="_blank" rel="noopener">http://johnwonder.github.io/2016/09/29/hexo-scaffold/</a></li><li><a href="http://mozilla.github.io/nunjucks/cn/templating.html" target="_blank" rel="noopener">http://mozilla.github.io/nunjucks/cn/templating.html</a></li><li><a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/writing.html</a></li></ul><h3 id="2017-09-11"><a href="#2017-09-11" class="headerlink" title="2017-09-11"></a>2017-09-11</h3><ul><li>添加自定义scaffold</li></ul>]]></content:encoded>
      
      <comments>https://cosmeapp.github.io/2017/09/08/create-hexo-blog/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
